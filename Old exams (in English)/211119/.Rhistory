text(newdat[50,1],0.5, "0.4632615", col = 'red')
abline(h = min(newdat$histo_resp) , col = 'red')
text(newdat[50,1],0.2, "0.2226549", col = 'red')
df <- DF
df <- df[which(df$cycno == 3 & df$trt == 'Reg-C'),]
fit = glm(histo_resp ~ meanmax, data=df, family=binomial)
newdat <- data.frame(meanmax=seq(min(df$meanmax), max(df$meanmax),len=100))
newdat$histo_resp = predict(fit, newdata=newdat, type="response")
plot(histo_resp~meanmax, data=df, col=df$kltrt, pch = 16)
lines(histo_resp ~ meanmax, newdat, col="green4", lwd=2)
abline(h = max(newdat$histo_resp), col = 'red')
text(newdat[50,1],0.5, "0.4632615", col = 'red')
abline(h = min(newdat$histo_resp) , col = 'red')
text(newdat[50,1],0.2, "0.2226549", col = 'red')
x11()
df <- DF
df <- df[which(df$cycno == 3 & df$trt == 'Reg-C'),]
fit = glm(histo_resp ~ meanmax, data=df, family=binomial)
newdat <- data.frame(meanmax=seq(min(df$meanmax), max(df$meanmax),len=100))
newdat$histo_resp = predict(fit, newdata=newdat, type="response")
plot(histo_resp~meanmax, data=df, col=df$kltrt, pch = 16)
lines(histo_resp ~ meanmax, newdat, col="green4", lwd=2)
abline(h = max(newdat$histo_resp), col = 'red')
text(newdat[50,1],0.5, "0.4632615", col = 'red')
abline(h = min(newdat$histo_resp) , col = 'red')
text(newdat[50,1],0.2, "0.2226549", col = 'red')
#No differentiating treatments
x11()
df <- DF
df <- df[which((df$cycno == 3 & df$trt == 'Reg-C') | (df$cycno == 4 & df$trt == 'Reg-DI')),]
fit = glm(histo_resp ~ meanmax, data=df, family=binomial)
newdat <- data.frame(meanmax=seq(min(df$meanmax), max(df$meanmax),len=100))
newdat$histo_resp = predict(fit, newdata=newdat, type="response")
plot(histo_resp~meanmax, data=df, col=df$kltrt, pch = 16)
lines(histo_resp ~ meanmax, newdat, col="green4", lwd=2)
#########################################################
View(DF)
View(DF)
View(DF)
help(save)
save(DF, file = "BigMamaframe.RData")
dim(DF)
save(DF, file = "BigMamaframe.RData")
save(DF, file = "BigMamaframes.RData")
save(DF, file = "BigMamaframe.RData")
df <- DF
df <- df[which(df$cycno == 4 & df$trt == 'Reg-DI'),]
fit = glm(histo_resp ~ meanmax, data=df, family=binomial)
newdat <- data.frame(meanmax=seq(min(df$meanmax), max(df$meanmax),len=100))
newdat$histo_resp = predict(fit, newdata=newdat, type="response")
plot(histo_resp~meanmax, data=df, col=df$klsex, pch = 16)
lines(histo_resp ~ meanmax, newdat, col="green4", lwd=2)
newdat
#No differentiating treatments
x11()
df <- DF
df <- df[which((df$cycno == 3 & df$trt == 'Reg-C') | (df$cycno == 4 & df$trt == 'Reg-DI')),]
fit = glm(histo_resp ~ meanmax, data=df, family=binomial)
newdat <- data.frame(meanmax=seq(min(df$meanmax), max(df$meanmax),len=100))
newdat$histo_resp = predict(fit, newdata=newdat, type="response")
plot(histo_resp~meanmax, data=df, col=df$kltrt, pch = 16)
lines(histo_resp ~ meanmax, newdat, col="green4", lwd=2)
newdat
x11()
par(mfrow = c(3,2))
for(cyc in 1:6){
df <- DF
df <- df[which(df$cycno == cyc),]
fit = glm(trtfact ~ totox, data=df, family=binomial)
newdat <- data.frame(totox=seq(min(df$totox), max(df$totox),len=100))
newdat$trtfact = predict(fit, newdata=newdat, type="response")
plot(trtfact~totox, data=df, col=df$klsex, pch = 16)
lines(trtfact ~ totox, newdat, col="green4", lwd=2)
}
summary(fit)
summary(newdat)
newdat
fit$fitted.values
cyc
df <- DF
df <- df[which(df$cycno == cyc),]
fit = glm(trtfact ~ totox, data=df, family=binomial)
df
fit$fitted.values
dim(fitted.values())
dim(fit$fitted.values
)
length(fit$fitted.values)
length(df[which(df$cycno == 6),])
dim(df[which(df$cycno == 6),])
length(df[which(df$cycno == 6),]$trtfact)
df <- DF
df <- df[which((df$cycno == 3 & df$trt == 'Reg-C') | (df$cycno == 4 & df$trt == 'Reg-DI')),]
fit = glm(histo_resp ~ meanmax, data=df, family=binomial)
summary(fit)
PseudoR2(fit)
roc_curve <- roc(df$histo_resp,fit$fitted.values,
smoothed = FALSE,
plot=TRUE, auc.polygon=TRUE, max.auc.polygon=TRUE, grid=TRUE,
print.auc=TRUE, show.thres=TRUE)
df$histo_resp
fit$fitted.values
df <- DF
df <- na.omit(df)
df <- df[which(df$cycno == 4 & df$trt == 'Reg-DI'),]
fit = glm(histo_resp ~ meanmax, data=df, family=binomial)
summary(fit)
```{r}
#install.packages("e1071")
library('e1071')
#install.packages('caTools')
library(caTools)
#help(svm)
```
#install.packages("e1071")
library('e1071')
#install.packages('caTools')
library(caTools)
#help(svm)
dat <- subset(DF, select = c('cycno','rRDI_cumdose', 'meanmax','histo_resp'))
dat <- dat[which(dat$cycno == 4),-1]
dat<-na.omit(dat)
set.seed(124)
split = sample.split(dat$death, SplitRatio = 0.8)
dat
dat <- subset(DF, select = c('cycno','rRDI_cumdose', 'meanmax','histo_resp'))
dat <- dat[which(dat$cycno == 4),-1]
dat<-na.omit(dat)
set.seed(124)
split = sample.split(dat$histo_resp SplitRatio = 0.8)
dat <- subset(DF, select = c('cycno','rRDI_cumdose', 'meanmax','histo_resp'))
dat <- dat[which(dat$cycno == 4),-1]
dat<-na.omit(dat)
set.seed(124)
split = sample.split(dat$histo_resp, SplitRatio = 0.8)
training_set = subset(dat, split == TRUE)
test_set = subset(dat, split == FALSE)
training_set[-3] = scale(training_set[-3])
test_set[-3] = scale(test_set[-3])
classifier = svm(formula = death ~ .,
data = training_set,
type = 'C-classification',
kernel = 'linear')
install.packages('StatPerMeCo')
plot(classifier, training_set)
help(svm)
library('e1071')
#install.packages('caTools')
library(caTools)
help(svm)
View(surgery_fup)
View(chemo_tox)
help(setwd)
setwd('C:\Users\gianm\Desktop\Applied Statistics\OldExams')
setwd('C:\Users\gianm\Desktop\Applied Statistics\OldExams')
before <- subset(biomarkers3, ntest_cyc == 1, select = c("patid", "cycno","WBC", "NEUT", "PLT"))
middle <- subset(biomarkers3, ntest_cyc == 2, select = c("patid", "cycno","WBC", "NEUT", "PLT"))
after <- subset(biomarkers3, ntest_cyc == 3, select = c("patid", "cycno","WBC", "NEUT", "PLT"))
x11()
par(mfrow=c(3,2))
for(i in 1:6){
plot((before[which(before$cycno == i), names(before) %in% c("WBC")]),before[which(before$cycno == i), names(before) %in% c("NEUT")],
xlab =cat("White Blood Count at cycle no. ",i), ylab =cat("Neutrophils at cycle no. ",i), main = cat("Cycle no. ", i))
}
x11()
par(mfrow=c(3,2))
for(i in 1:6){
plot((middle[which(before$cycno == i), names(before) %in% c("NEUT")]),middle[which(before$cycno == i), names(before) %in% c("PLT")],
xlab =cat("White Blood Count at cycle no. ",i), ylab =cat("Neutrophils at cycle no. ",i), main = cat("Cycle no. ", i))
}
fit = glm(histo_resp ~ meanmax, data=df, family=binomial)
newdat <- data.frame(meanmax=seq(min(df$meanmax), max(df$meanmax),len=100))
newdat$histo_resp = predict(fit, newdata=newdat, type="response")
plot(histo_resp~meanmax, data=df, col=df$klsex, pch = 16)
lines(histo_resp ~ meanmax, newdat, col="green4", lwd=2)
N =2262
DF <- chemo_tox
DF$ren1 <- biomarkers1$ren1
DF$alk1 <- biomarkers1$alk1
DF$ldh1 <- biomarkers1$ldh1
DF$cal1 <- biomarkers1$cal1
DF$mag1 <- biomarkers1$mag1
DF$WBC.b <- rep(NA,N)
DF$NEUT.b <- rep(NA,N)
DF$PLT.b <- rep(NA,N)
DF$time.b <- rep(NA,N)
DF$WBC.m <- rep(NA,N)
DF$NEUT.m <- rep(NA,N)
DF$PLT.m <- rep(NA,N)
DF$time.m <- rep(NA,N)
DF$WBC.a <- rep(NA,N)
DF$NEUT.a <- rep(NA,N)
DF$PLT.a <- rep(NA,N)
DF$time.a <- rep(NA,N)
DF$age_in <- rep(NA,N)
for(i in DF$patid){
k <- biomarkers3[which( biomarkers3$patid == i & biomarkers3$ntest_cyc == 1),names(biomarkers3) %in% c('cycno','WBC', 'NEUT', 'PLT', 'time')]
for(j in k$cycno){
DF[which(DF$patid == i & DF$cycno == j), ]$time.b <- k[which(k$cycno == j),]$time
DF[which(DF$patid == i & DF$cycno == j), ]$WBC.b <- k[which(k$cycno == j),]$WBC
DF[which(DF$patid == i & DF$cycno == j), ]$NEUT.b <- k[which(k$cycno == j),]$NEUT
DF[which(DF$patid == i & DF$cycno == j), ]$PLT.b <- k[which(k$cycno == j),]$PLT
}
}
for(i in DF$patid){
k <- biomarkers3[which( biomarkers3$patid == i & biomarkers3$ntest_cyc == 1),names(biomarkers3) %in% c('cycno','WBC', 'NEUT', 'PLT', 'time')]
for(j in k$cycno){
DF[which(DF$patid == i & DF$cycno == j), ]$time.b <- k[which(k$cycno == j),]$time
DF[which(DF$patid == i & DF$cycno == j), ]$WBC.b <- k[which(k$cycno == j),]$WBC
DF[which(DF$patid == i & DF$cycno == j), ]$NEUT.b <- k[which(k$cycno == j),]$NEUT
DF[which(DF$patid == i & DF$cycno == j), ]$PLT.b <- k[which(k$cycno == j),]$PLT
}
}
for(i in DF$patid){
k <- biomarkers3[which( biomarkers3$patid == i & biomarkers3$ntest_cyc == 2),names(biomarkers3) %in% c('cycno','WBC', 'NEUT', 'PLT', 'time')]
for(j in k$cycno){
DF[which(DF$patid == i & DF$cycno == j), ]$time.m <- k[which(k$cycno == j),]$time
DF[which(DF$patid == i & DF$cycno == j), ]$WBC.m <- k[which(k$cycno == j),]$WBC
DF[which(DF$patid == i & DF$cycno == j), ]$NEUT.m <- k[which(k$cycno == j),]$NEUT
DF[which(DF$patid == i & DF$cycno == j), ]$PLT.m <- k[which(k$cycno == j),]$PLT
}
}
for(i in DF$patid){
k <- biomarkers3[which( biomarkers3$patid == i & biomarkers3$ntest_cyc == 3),names(biomarkers3) %in% c('cycno','WBC', 'NEUT', 'PLT', 'time')]
for(j in k$cycno){
DF[which(DF$patid == i & DF$cycno == j), ]$time.a <- k[which(k$cycno == j),]$time
DF[which(DF$patid == i & DF$cycno == j), ]$WBC.a <- k[which(k$cycno == j),]$WBC
DF[which(DF$patid == i & DF$cycno == j), ]$NEUT.a <- k[which(k$cycno == j),]$NEUT
DF[which(DF$patid == i & DF$cycno == j), ]$PLT.a <- k[which(k$cycno == j),]$PLT
}
}
for(i in baseline$patid){
DF[which(DF$patid == i),]$age_in <- baseline[which(baseline$patid == i),]$age_in
}
Col = c('green','lightblue','blue','orange','red')
#COLOR VARIABLES
DF$kl <- rep(NA, N)
DF[which(DF$naus == 0),]$kl <- 'green'
DF[which(DF$naus == 1),]$kl <- 'lightblue'
DF[which(DF$naus == 2),]$kl <- 'blue'
DF[which(DF$naus == 3),]$kl <- 'orange'
DF[which(DF$naus == 4),]$kl <- 'red'
par(mfrow = c(3,2))
for( i in DF$patid){
x = DF[which(DF$patid == i), names(DF) %in% c('time.b')]
y = DF[which(DF$patid == i), names(DF) %in% c('WBC.b')]
if(DF[which(DF$patid == i),'trt'][1] == 'Reg-C'){
kl = 'blue'
}
if(DF[which(DF$patid == i),'trt'][1] == 'Reg-DI'){
kl = 'red'
}
if(baseline[which(baseline$patid == i),'age_cat'][1] == 'less than 15'){
plot(x,y, type = 'l', xlab = 'time', ylab = 'WBC', xlim = c(0,175), ylim = c(0,100), col = kl, main = '< 15years, red = Reg-DI, blue = Reg-C')
par(new = TRUE)
}
}
par(new = FALSE)
df <- read.table("pigeons.txt")
setwd("C:/Users/gianm/Desktop/TDEApplied/Old exams (in English)/211119")
df <- read.table("pigeons.txt")
head(df)
help(t.test)
setwd("C:/Users/gianm/Desktop/TDEApplied/Labs/Lab6-Paired-Gaussian")
rates <- read.table(file='exchange.txt', header=T)
head(rates)
x11()
matplot(rates, type='l', ylim=c(0,3), lwd = 2, xlab='days')
legend(1,3,legend=c('Dollar','Pound'),col=1:2,lwd=2,lty=1:2)
diffrates <- matrix(NA, 30, 2)
for(i in 1:30)
diffrates[i,] <- as.numeric(rates[i+1,] - rates[i,])
diffrates
# we first need to verify the Gaussian assumption
plot(diffrates, asp=1, pch=1)
mcshapiro.test(diffrates)
mu0      <- c(0, 0)
x.mean   <- colMeans(diffrates)
x.cov    <- cov(diffrates)
x.invcov <- solve(x.cov)
n <- 30
p <- 2
load("mcshapiro.test.Rdata")
df <- read.table("pigeons.txt")
head(df)
load("mcshapiro.test.Rdata")
setwd("C:/Users/gianm/Desktop/TDEApplied/Old exams (in English)/211119")
df <- read.table("pigeons.txt")
head(df)
load("mcshapiro.test.Rdata")
mcshapiro.test(df)
df <- read.table("pigeons.txt")
head(df)
load("mcshapiro.test.Rdata")
D <- data.frame(weight = df[,1]-df[,3], wing = df[,2]-df[,4])
mcshapiro.test(df)
mcshapiro.test(D)
# siamo di fronte ad una normale bivariata
matpot(t(D))
# siamo di fronte ad una normale bivariata
matplot(t(D))
# siamo di fronte ad una normale bivariata
matplot(t(D), type = 'l')
matplot(t(df), type = 'l')
matplot(t(df[,c(1,3)]), type = 'l')
matplot(t(df[,c(2,4)]), type = 'l')
par(mfrow = c(1,2))
matplot(t(df[,c(1,3)]), type = 'l')
matplot(t(df[,c(2,4)]), type = 'l')
D <- data.frame(weight = df[,1]-df[,3], wing = df[,2]-df[,4])
mcshapiro.test(D)
df <- read.table("pigeons.txt")
head(df)
load("mcshapiro.test.Rdata")
par(mfrow = c(1,2))
matplot(t(df[,c(1,3)]), type = 'l')
matplot(t(df[,c(2,4)]), type = 'l')
D <- data.frame(weight = df[,1]-df[,3], wing = df[,2]-df[,4])
mcshapiro.test(D)
# siamo di fronte ad una normale bivariata pvalue = 0.5536
# voglio verificare che la sua media non sia (0,0) per poter asserire che vi siano differenze
mu0      <- c(0, 0)
x.mean   <- colMeans(D)
x.cov    <- cov(d)
x.invcov <- solve(x.cov)
n <- dim(D)[1]
p <- 2
x.T2       <- n * (x.mean-mu0) %*% x.invcov %*% (x.mean-mu0)
Pb <- 1-pf(x.T2*(n-p)/(p*(n-1)), p, n-p)
Pb
# mean under H0 (blue)
points(mu0[1], mu0[2], col='blue', pch=16)
# sample mean (black)
points(x.mean[1], x.mean[2], col='black', pch=16)
# we represent the confidence region of level 95%: where does mu0 fall?
alpha <- .05
cfr.fisher <- (p*(n-1)/(n-p))*qf(1-alpha,p,n-p)
ellipse(center=x.mean, shape=x.cov/n, radius=sqrt(cfr.fisher), lwd=2)
# what about the region of level 99%?
alpha <- .01
cfr.fisher <- (p*(n-1)/(n-p))*qf(1-alpha,p,n-p)
ellipse(center=x.mean, shape=x.cov/n, radius=sqrt(cfr.fisher), lwd=2, col='orange', add=TRUE)
library(car)
library(car)
df <- read.table("pigeons.txt")
head(df)
load("mcshapiro.test.Rdata")
par(mfrow = c(1,2))
matplot(t(df[,c(1,3)]), type = 'l')
matplot(t(df[,c(2,4)]), type = 'l')
D <- data.frame(weight = df[,1]-df[,3], wing = df[,2]-df[,4])
mcshapiro.test(D)
# siamo di fronte ad una normale bivariata pvalue = 0.5536
# voglio verificare che la sua media non sia (0,0) per poter asserire che vi siano differenze
mu0      <- c(0, 0)
x.mean   <- colMeans(D)
x.cov    <- cov(d)
x.invcov <- solve(x.cov)
n <- dim(D)[1]
p <- 2
x.T2       <- n * (x.mean-mu0) %*% x.invcov %*% (x.mean-mu0)
Pb <- 1-pf(x.T2*(n-p)/(p*(n-1)), p, n-p)
Pb
# mean under H0 (blue)
points(mu0[1], mu0[2], col='blue', pch=16)
# sample mean (black)
points(x.mean[1], x.mean[2], col='black', pch=16)
# we represent the confidence region of level 95%: where does mu0 fall?
alpha <- .05
cfr.fisher <- (p*(n-1)/(n-p))*qf(1-alpha,p,n-p)
ellipse(center=x.mean, shape=x.cov/n, radius=sqrt(cfr.fisher), lwd=2)
# what about the region of level 99%?
alpha <- .01
cfr.fisher <- (p*(n-1)/(n-p))*qf(1-alpha,p,n-p)
ellipse(center=x.mean, shape=x.cov/n, radius=sqrt(cfr.fisher), lwd=2, col='orange', add=TRUE)
dev.off()
points(mu0[1], mu0[2], col='blue', pch=16)
# sample mean (black)
points(x.mean[1], x.mean[2], col='black', pch=16)
# we represent the confidence region of level 95%: where does mu0 fall?
alpha <- .05
cfr.fisher <- (p*(n-1)/(n-p))*qf(1-alpha,p,n-p)
ellipse(center=x.mean, shape=x.cov/n, radius=sqrt(cfr.fisher), lwd=2)
# what about the region of level 99%?
alpha <- .01
cfr.fisher <- (p*(n-1)/(n-p))*qf(1-alpha,p,n-p)
ellipse(center=x.mean, shape=x.cov/n, radius=sqrt(cfr.fisher), lwd=2, col='orange', add=TRUE)
# we first need to verify the Gaussian assumption
plot(diffrates, asp=1, pch=1)
x11()
par(mfrow = c(1,2))
matplot(t(df[,c(1,3)]), type = 'l')
matplot(t(df[,c(2,4)]), type = 'l')
dev.off()
# siamo di fronte ad una normale bivariata pvalue = 0.5536
# voglio verificare che la sua media non sia (0,0) per poter asserire che vi siano differenze
plot(D)
plot(D)
mu0      <- c(0, 0)
x.mean   <- colMeans(D)
x.cov    <- cov(d)
x.invcov <- solve(x.cov)
n <- dim(D)[1]
p <- 2
x.T2       <- n * (x.mean-mu0) %*% x.invcov %*% (x.mean-mu0)
Pb <- 1-pf(x.T2*(n-p)/(p*(n-1)), p, n-p)
Pb
# mean under H0 (blue)
points(mu0[1], mu0[2], col='blue', pch=16)
# sample mean (black)
points(x.mean[1], x.mean[2], col='black', pch=16)
# we represent the confidence region of level 95%: where does mu0 fall?
alpha <- .05
cfr.fisher <- (p*(n-1)/(n-p))*qf(1-alpha,p,n-p)
ellipse(center=x.mean, shape=x.cov/n, radius=sqrt(cfr.fisher), lwd=2)
# what about the region of level 99%?
alpha <- .01
cfr.fisher <- (p*(n-1)/(n-p))*qf(1-alpha,p,n-p)
ellipse(center=x.mean, shape=x.cov/n, radius=sqrt(cfr.fisher), lwd=2, col='orange', add=TRUE)
# siamo di fronte ad una normale bivariata pvalue = 0.5536
# voglio verificare che la sua media non sia (0,0) per poter asserire che vi siano differenze
plot(D)
# siamo di fronte ad una normale bivariata pvalue = 0.5536
# voglio verificare che la sua media non sia (0,0) per poter asserire che vi siano differenze
plot(D)
D <- data.frame(weight = df[,1]-df[,3], wing = df[,2]-df[,4])
D
head(df)
ellipse(center=x.mean, shape=x.cov/n, radius=sqrt(cfr.fisher), lwd=2, col='orange', add=TRUE)
ellipse(center=x.mean, shape=x.cov/n, radius=sqrt(cfr.fisher), lwd=2, col='orange', add=TRUE)
cfr.fisher <- (p*(n-1)/(n-p))*qf(1-alpha,p,n-p)
x.cov
# sample mean (black)
points(x.mean[1], x.mean[2], col='black', pch=16)
x.mean   <- colMeans(D)
x.mean
dev.off()
Pb
k <- 4
alpha <- 0.1
ICmean <- cbind(inf=x.mean - sqrt(diag(x.cov)/n) * qt(1 - alpha/(2*k), n-1),
center= x.mean,
sup= x.mean + sqrt(diag(x.cov)/n) * qt(1 - alpha/(2*k), n-1))
ICvar <- cbind(inf=diag(x.cov)*(n-1) / qchisq(1 - alpha/(2*k), n-1),
center=diag(x.cov),
sup=diag(x.cov)*(n-1) / qchisq(alpha/(2*k), n-1))
ICmean
ICvar
head(df)
wingspan <- df[,2] - 1.2*df[,4]
wingspan
t.test(wingspan)
help("t.test")
t.test(wingspan alternative = c("greater"), mu = 0)
t.test(wingspan, alternative = "greater", mu = 0)
setwd("C:/Users/gianm/Desktop/TDEApplied/Old exams (in English)/211119")
rm(list = ls())
df <- read.table("wellness.txt")
head(df)
set.seed(321)
pvals <- rep(NA,11)
for(i in 1:11){
prog <- df[,i]
}
rm(list = ls())
df <- read.table("wellness.txt")
head(df)
set.seed(321)
pvals <- rep(NA,11)
for(i in 1:11){
prog <- df[,i]
}
rm(list = ls())
df <- read.table("wellness.txt")
head(df)
set.seed(321)
stat = c()
for (i in 1:5000) {
er = c()
for (j in 1:14) {
er = c(er, df[j,sample(1:11)[1]])
}
stat = c(stat, mean(er))
}
hist(stat)
for (i in 1:11) {
abline(v=mean(df[,i]))
print(paste(i, sum(mean(df[,i]) > stat)/500))
}
head(df)
rm(list = ls())
df <- read.table("wellness.txt")
head(df)
set.seed(321)
stat = c()
for (i in 1:5000) {
er = c()
for (j in 1:14) {
er = c(er, df[j,sample(1:11)[1]])
}
stat = c(stat, mean(er))
}
hist(stat)
for (i in 1:11) {
abline(v=mean(df[,i]))
print(paste(i, sum(mean(df[,i]) > stat)/5000))
}
rm(list = ls())
df <- read.table("sansiro.txt")
head(df)
opera
table(df$opera)
