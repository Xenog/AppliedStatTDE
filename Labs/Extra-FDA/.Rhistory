abline(h = min(newdat$histo_resp) , col = 'red')
text(newdat[1,1],0.2, "0.2226549", col = 'red')
df <- DF
df <- df[which(df$cycno == 3 & df$trt == 'Reg-C'),]
fit = glm(histo_resp ~ meanmax, data=df, family=binomial)
newdat <- data.frame(meanmax=seq(min(df$meanmax), max(df$meanmax),len=100))
newdat$histo_resp = predict(fit, newdata=newdat, type="response")
plot(histo_resp~meanmax, data=df, col=df$klsex, pch = 16)
lines(histo_resp ~ meanmax, newdat, col="green4", lwd=2)
abline(h = max(newdat$histo_resp), col = 'red')
text(newdat[100,1],0.5, "0.4632615", col = 'red')
abline(h = min(newdat$histo_resp) , col = 'red')
text(newdat[1,1],0.2, "0.2226549", col = 'red')
#Differentiating treatments
x11()
df <- DF
df <- df[which(df$cycno == 3 & df$trt == 'Reg-C'),]
fit = glm(histo_resp ~ meanmax, data=df, family=binomial)
newdat <- data.frame(meanmax=seq(min(df$meanmax), max(df$meanmax),len=100))
newdat$histo_resp = predict(fit, newdata=newdat, type="response")
plot(histo_resp~meanmax, data=df, col=df$klsex, pch = 16)
lines(histo_resp ~ meanmax, newdat, col="green4", lwd=2)
abline(h = max(newdat$histo_resp), col = 'red')
text(newdat[100,1],0.5, "0.4632615", col = 'red')
abline(h = min(newdat$histo_resp) , col = 'red')
text(newdat[1,1],0.2, "0.2226549", col = 'red')
df <- DF
df <- df[which(df$cycno == 3 & df$trt == 'Reg-C'),]
fit = glm(histo_resp ~ meanmax, data=df, family=binomial)
newdat <- data.frame(meanmax=seq(min(df$meanmax), max(df$meanmax),len=100))
newdat$histo_resp = predict(fit, newdata=newdat, type="response")
plot(histo_resp~meanmax, data=df, col=df$klsex, pch = 16)
lines(histo_resp ~ meanmax, newdat, col="green4", lwd=2)
abline(h = max(newdat$histo_resp), col = 'red')
text(newdat[95,1],0.5, "0.4632615", col = 'red')
abline(h = min(newdat$histo_resp) , col = 'red')
text(newdat[5,1],0.2, "0.2226549", col = 'red')
df <- DF
df <- df[which(df$cycno == 3 & df$trt == 'Reg-C'),]
fit = glm(histo_resp ~ meanmax, data=df, family=binomial)
newdat <- data.frame(meanmax=seq(min(df$meanmax), max(df$meanmax),len=100))
newdat$histo_resp = predict(fit, newdata=newdat, type="response")
plot(histo_resp~meanmax, data=df, col=df$klsex, pch = 16)
lines(histo_resp ~ meanmax, newdat, col="green4", lwd=2)
abline(h = max(newdat$histo_resp), col = 'red')
text(newdat[95,1],0.5, "0.4632615", col = 'red')
abline(h = min(newdat$histo_resp) , col = 'red')
text(newdat[5,1],0.2, "0.2226549", col = 'red')
x11()
df <- DF
df <- df[which(df$cycno == 3 & df$trt == 'Reg-C'),]
fit = glm(histo_resp ~ meanmax, data=df, family=binomial)
newdat <- data.frame(meanmax=seq(min(df$meanmax), max(df$meanmax),len=100))
newdat$histo_resp = predict(fit, newdata=newdat, type="response")
plot(histo_resp~meanmax, data=df, col=df$klsex, pch = 16)
lines(histo_resp ~ meanmax, newdat, col="green4", lwd=2)
abline(h = max(newdat$histo_resp), col = 'red')
text(newdat[95,1],0.5, "0.4632615", col = 'red')
abline(h = min(newdat$histo_resp) , col = 'red')
text(newdat[5,1],0.2, "0.2226549", col = 'red')
df <- DF
df <- df[which(df$cycno == 3 & df$trt == 'Reg-C'),]
fit = glm(histo_resp ~ meanmax, data=df, family=binomial)
newdat <- data.frame(meanmax=seq(min(df$meanmax), max(df$meanmax),len=100))
newdat$histo_resp = predict(fit, newdata=newdat, type="response")
plot(histo_resp~meanmax, data=df, col=df$klsex, pch = 16)
lines(histo_resp ~ meanmax, newdat, col="green4", lwd=2)
abline(h = max(newdat$histo_resp), col = 'red')
text(newdat[50,1],0.5, "0.4632615", col = 'red')
abline(h = min(newdat$histo_resp) , col = 'red')
text(newdat[50,1],0.2, "0.2226549", col = 'red')
df <- DF
df <- df[which(df$cycno == 3 & df$trt == 'Reg-C'),]
fit = glm(histo_resp ~ meanmax, data=df, family=binomial)
newdat <- data.frame(meanmax=seq(min(df$meanmax), max(df$meanmax),len=100))
newdat$histo_resp = predict(fit, newdata=newdat, type="response")
plot(histo_resp~meanmax, data=df, col=df$kltrt, pch = 16)
lines(histo_resp ~ meanmax, newdat, col="green4", lwd=2)
abline(h = max(newdat$histo_resp), col = 'red')
text(newdat[50,1],0.5, "0.4632615", col = 'red')
abline(h = min(newdat$histo_resp) , col = 'red')
text(newdat[50,1],0.2, "0.2226549", col = 'red')
x11()
df <- DF
df <- df[which(df$cycno == 3 & df$trt == 'Reg-C'),]
fit = glm(histo_resp ~ meanmax, data=df, family=binomial)
newdat <- data.frame(meanmax=seq(min(df$meanmax), max(df$meanmax),len=100))
newdat$histo_resp = predict(fit, newdata=newdat, type="response")
plot(histo_resp~meanmax, data=df, col=df$kltrt, pch = 16)
lines(histo_resp ~ meanmax, newdat, col="green4", lwd=2)
abline(h = max(newdat$histo_resp), col = 'red')
text(newdat[50,1],0.5, "0.4632615", col = 'red')
abline(h = min(newdat$histo_resp) , col = 'red')
text(newdat[50,1],0.2, "0.2226549", col = 'red')
#No differentiating treatments
x11()
df <- DF
df <- df[which((df$cycno == 3 & df$trt == 'Reg-C') | (df$cycno == 4 & df$trt == 'Reg-DI')),]
fit = glm(histo_resp ~ meanmax, data=df, family=binomial)
newdat <- data.frame(meanmax=seq(min(df$meanmax), max(df$meanmax),len=100))
newdat$histo_resp = predict(fit, newdata=newdat, type="response")
plot(histo_resp~meanmax, data=df, col=df$kltrt, pch = 16)
lines(histo_resp ~ meanmax, newdat, col="green4", lwd=2)
#########################################################
View(DF)
View(DF)
View(DF)
help(save)
save(DF, file = "BigMamaframe.RData")
dim(DF)
save(DF, file = "BigMamaframe.RData")
save(DF, file = "BigMamaframes.RData")
save(DF, file = "BigMamaframe.RData")
df <- DF
df <- df[which(df$cycno == 4 & df$trt == 'Reg-DI'),]
fit = glm(histo_resp ~ meanmax, data=df, family=binomial)
newdat <- data.frame(meanmax=seq(min(df$meanmax), max(df$meanmax),len=100))
newdat$histo_resp = predict(fit, newdata=newdat, type="response")
plot(histo_resp~meanmax, data=df, col=df$klsex, pch = 16)
lines(histo_resp ~ meanmax, newdat, col="green4", lwd=2)
newdat
#No differentiating treatments
x11()
df <- DF
df <- df[which((df$cycno == 3 & df$trt == 'Reg-C') | (df$cycno == 4 & df$trt == 'Reg-DI')),]
fit = glm(histo_resp ~ meanmax, data=df, family=binomial)
newdat <- data.frame(meanmax=seq(min(df$meanmax), max(df$meanmax),len=100))
newdat$histo_resp = predict(fit, newdata=newdat, type="response")
plot(histo_resp~meanmax, data=df, col=df$kltrt, pch = 16)
lines(histo_resp ~ meanmax, newdat, col="green4", lwd=2)
newdat
x11()
par(mfrow = c(3,2))
for(cyc in 1:6){
df <- DF
df <- df[which(df$cycno == cyc),]
fit = glm(trtfact ~ totox, data=df, family=binomial)
newdat <- data.frame(totox=seq(min(df$totox), max(df$totox),len=100))
newdat$trtfact = predict(fit, newdata=newdat, type="response")
plot(trtfact~totox, data=df, col=df$klsex, pch = 16)
lines(trtfact ~ totox, newdat, col="green4", lwd=2)
}
summary(fit)
summary(newdat)
newdat
fit$fitted.values
cyc
df <- DF
df <- df[which(df$cycno == cyc),]
fit = glm(trtfact ~ totox, data=df, family=binomial)
df
fit$fitted.values
dim(fitted.values())
dim(fit$fitted.values
)
length(fit$fitted.values)
length(df[which(df$cycno == 6),])
dim(df[which(df$cycno == 6),])
length(df[which(df$cycno == 6),]$trtfact)
df <- DF
df <- df[which((df$cycno == 3 & df$trt == 'Reg-C') | (df$cycno == 4 & df$trt == 'Reg-DI')),]
fit = glm(histo_resp ~ meanmax, data=df, family=binomial)
summary(fit)
PseudoR2(fit)
roc_curve <- roc(df$histo_resp,fit$fitted.values,
smoothed = FALSE,
plot=TRUE, auc.polygon=TRUE, max.auc.polygon=TRUE, grid=TRUE,
print.auc=TRUE, show.thres=TRUE)
df$histo_resp
fit$fitted.values
df <- DF
df <- na.omit(df)
df <- df[which(df$cycno == 4 & df$trt == 'Reg-DI'),]
fit = glm(histo_resp ~ meanmax, data=df, family=binomial)
summary(fit)
```{r}
#install.packages("e1071")
library('e1071')
#install.packages('caTools')
library(caTools)
#help(svm)
```
#install.packages("e1071")
library('e1071')
#install.packages('caTools')
library(caTools)
#help(svm)
dat <- subset(DF, select = c('cycno','rRDI_cumdose', 'meanmax','histo_resp'))
dat <- dat[which(dat$cycno == 4),-1]
dat<-na.omit(dat)
set.seed(124)
split = sample.split(dat$death, SplitRatio = 0.8)
dat
dat <- subset(DF, select = c('cycno','rRDI_cumdose', 'meanmax','histo_resp'))
dat <- dat[which(dat$cycno == 4),-1]
dat<-na.omit(dat)
set.seed(124)
split = sample.split(dat$histo_resp SplitRatio = 0.8)
dat <- subset(DF, select = c('cycno','rRDI_cumdose', 'meanmax','histo_resp'))
dat <- dat[which(dat$cycno == 4),-1]
dat<-na.omit(dat)
set.seed(124)
split = sample.split(dat$histo_resp, SplitRatio = 0.8)
training_set = subset(dat, split == TRUE)
test_set = subset(dat, split == FALSE)
training_set[-3] = scale(training_set[-3])
test_set[-3] = scale(test_set[-3])
classifier = svm(formula = death ~ .,
data = training_set,
type = 'C-classification',
kernel = 'linear')
install.packages('StatPerMeCo')
plot(classifier, training_set)
help(svm)
library('e1071')
#install.packages('caTools')
library(caTools)
help(svm)
View(surgery_fup)
View(chemo_tox)
help(setwd)
setwd('C:\Users\gianm\Desktop\Applied Statistics\OldExams')
setwd('C:\Users\gianm\Desktop\Applied Statistics\OldExams')
before <- subset(biomarkers3, ntest_cyc == 1, select = c("patid", "cycno","WBC", "NEUT", "PLT"))
middle <- subset(biomarkers3, ntest_cyc == 2, select = c("patid", "cycno","WBC", "NEUT", "PLT"))
after <- subset(biomarkers3, ntest_cyc == 3, select = c("patid", "cycno","WBC", "NEUT", "PLT"))
x11()
par(mfrow=c(3,2))
for(i in 1:6){
plot((before[which(before$cycno == i), names(before) %in% c("WBC")]),before[which(before$cycno == i), names(before) %in% c("NEUT")],
xlab =cat("White Blood Count at cycle no. ",i), ylab =cat("Neutrophils at cycle no. ",i), main = cat("Cycle no. ", i))
}
x11()
par(mfrow=c(3,2))
for(i in 1:6){
plot((middle[which(before$cycno == i), names(before) %in% c("NEUT")]),middle[which(before$cycno == i), names(before) %in% c("PLT")],
xlab =cat("White Blood Count at cycle no. ",i), ylab =cat("Neutrophils at cycle no. ",i), main = cat("Cycle no. ", i))
}
fit = glm(histo_resp ~ meanmax, data=df, family=binomial)
newdat <- data.frame(meanmax=seq(min(df$meanmax), max(df$meanmax),len=100))
newdat$histo_resp = predict(fit, newdata=newdat, type="response")
plot(histo_resp~meanmax, data=df, col=df$klsex, pch = 16)
lines(histo_resp ~ meanmax, newdat, col="green4", lwd=2)
N =2262
DF <- chemo_tox
DF$ren1 <- biomarkers1$ren1
DF$alk1 <- biomarkers1$alk1
DF$ldh1 <- biomarkers1$ldh1
DF$cal1 <- biomarkers1$cal1
DF$mag1 <- biomarkers1$mag1
DF$WBC.b <- rep(NA,N)
DF$NEUT.b <- rep(NA,N)
DF$PLT.b <- rep(NA,N)
DF$time.b <- rep(NA,N)
DF$WBC.m <- rep(NA,N)
DF$NEUT.m <- rep(NA,N)
DF$PLT.m <- rep(NA,N)
DF$time.m <- rep(NA,N)
DF$WBC.a <- rep(NA,N)
DF$NEUT.a <- rep(NA,N)
DF$PLT.a <- rep(NA,N)
DF$time.a <- rep(NA,N)
DF$age_in <- rep(NA,N)
for(i in DF$patid){
k <- biomarkers3[which( biomarkers3$patid == i & biomarkers3$ntest_cyc == 1),names(biomarkers3) %in% c('cycno','WBC', 'NEUT', 'PLT', 'time')]
for(j in k$cycno){
DF[which(DF$patid == i & DF$cycno == j), ]$time.b <- k[which(k$cycno == j),]$time
DF[which(DF$patid == i & DF$cycno == j), ]$WBC.b <- k[which(k$cycno == j),]$WBC
DF[which(DF$patid == i & DF$cycno == j), ]$NEUT.b <- k[which(k$cycno == j),]$NEUT
DF[which(DF$patid == i & DF$cycno == j), ]$PLT.b <- k[which(k$cycno == j),]$PLT
}
}
for(i in DF$patid){
k <- biomarkers3[which( biomarkers3$patid == i & biomarkers3$ntest_cyc == 1),names(biomarkers3) %in% c('cycno','WBC', 'NEUT', 'PLT', 'time')]
for(j in k$cycno){
DF[which(DF$patid == i & DF$cycno == j), ]$time.b <- k[which(k$cycno == j),]$time
DF[which(DF$patid == i & DF$cycno == j), ]$WBC.b <- k[which(k$cycno == j),]$WBC
DF[which(DF$patid == i & DF$cycno == j), ]$NEUT.b <- k[which(k$cycno == j),]$NEUT
DF[which(DF$patid == i & DF$cycno == j), ]$PLT.b <- k[which(k$cycno == j),]$PLT
}
}
for(i in DF$patid){
k <- biomarkers3[which( biomarkers3$patid == i & biomarkers3$ntest_cyc == 2),names(biomarkers3) %in% c('cycno','WBC', 'NEUT', 'PLT', 'time')]
for(j in k$cycno){
DF[which(DF$patid == i & DF$cycno == j), ]$time.m <- k[which(k$cycno == j),]$time
DF[which(DF$patid == i & DF$cycno == j), ]$WBC.m <- k[which(k$cycno == j),]$WBC
DF[which(DF$patid == i & DF$cycno == j), ]$NEUT.m <- k[which(k$cycno == j),]$NEUT
DF[which(DF$patid == i & DF$cycno == j), ]$PLT.m <- k[which(k$cycno == j),]$PLT
}
}
for(i in DF$patid){
k <- biomarkers3[which( biomarkers3$patid == i & biomarkers3$ntest_cyc == 3),names(biomarkers3) %in% c('cycno','WBC', 'NEUT', 'PLT', 'time')]
for(j in k$cycno){
DF[which(DF$patid == i & DF$cycno == j), ]$time.a <- k[which(k$cycno == j),]$time
DF[which(DF$patid == i & DF$cycno == j), ]$WBC.a <- k[which(k$cycno == j),]$WBC
DF[which(DF$patid == i & DF$cycno == j), ]$NEUT.a <- k[which(k$cycno == j),]$NEUT
DF[which(DF$patid == i & DF$cycno == j), ]$PLT.a <- k[which(k$cycno == j),]$PLT
}
}
for(i in baseline$patid){
DF[which(DF$patid == i),]$age_in <- baseline[which(baseline$patid == i),]$age_in
}
Col = c('green','lightblue','blue','orange','red')
#COLOR VARIABLES
DF$kl <- rep(NA, N)
DF[which(DF$naus == 0),]$kl <- 'green'
DF[which(DF$naus == 1),]$kl <- 'lightblue'
DF[which(DF$naus == 2),]$kl <- 'blue'
DF[which(DF$naus == 3),]$kl <- 'orange'
DF[which(DF$naus == 4),]$kl <- 'red'
par(mfrow = c(3,2))
for( i in DF$patid){
x = DF[which(DF$patid == i), names(DF) %in% c('time.b')]
y = DF[which(DF$patid == i), names(DF) %in% c('WBC.b')]
if(DF[which(DF$patid == i),'trt'][1] == 'Reg-C'){
kl = 'blue'
}
if(DF[which(DF$patid == i),'trt'][1] == 'Reg-DI'){
kl = 'red'
}
if(baseline[which(baseline$patid == i),'age_cat'][1] == 'less than 15'){
plot(x,y, type = 'l', xlab = 'time', ylab = 'WBC', xlim = c(0,175), ylim = c(0,100), col = kl, main = '< 15years, red = Reg-DI, blue = Reg-C')
par(new = TRUE)
}
}
par(new = FALSE)
library(devtools)
rm(list = ls())
# Load package fda
library(fda)
# Set parameters
m <- 5           # spline order
degree <- m-1    # spline degree
nbasis <- 9
# Create the basis
help(create.bspline.basis)
basis <- create.bspline.basis(rangeval=c(0,1), nbasis=nbasis, norder=m)
# If breaks are not provided, equispaced knots are created
names(basis)
# Upload noisy data
noisycurve <- read.table("noisycurvebis.txt",header=T)
head(noisycurve)
dim(noisycurve)
Xobs0 <- noisycurve$X0
abscissa <- noisycurve$Abscissa
NT <- length(abscissa)
setwd("C:/Users/gianm/Desktop/TDEApplied/Labs/Extra-FDA")
# Upload noisy data
noisycurve <- read.table("noisycurvebis.txt",header=T)
head(noisycurve)
dim(noisycurve)
Xobs0 <- noisycurve$X0
abscissa <- noisycurve$Abscissa
NT <- length(abscissa)
plot(abscissa,Xobs0,xlab="t",ylab="observed data")
# Upload true data
truecurve <- read.table("truecurve.txt",header=T)
head(truecurve)
points(abscissa,truecurve$X0vera,type="l")
# compute the central finite differences
rappincX1 <- (Xobs0[3:NT]-Xobs0[1:(NT-2)])/(abscissa[3:NT]-abscissa[1:(NT-2)])
rappincX2 <- ((Xobs0[3:NT]-Xobs0[2:(NT-1)])/(abscissa[3:NT]-abscissa[2:(NT-1)])-(Xobs0[2:(NT-1)]-Xobs0[1:(NT-2)])/(abscissa[2:(NT-1)]-abscissa[1:(NT-2)]))*2/(abscissa[3:(NT)]-abscissa[1:(NT-2)])
par(mfrow=c(2,2),mar=c(6,5,2,1),mex=0.6, mgp=c(2.2,0.7,0),pty="m", font.main=1,font.lab=1, font.axis=1,cex.lab=1.3,cex.axis=1)
plot(abscissa,Xobs0,xlab="t",ylab="observed data")
plot(abscissa[2:(NT-1)],rappincX1,xlab="t",ylab="first differences x",type="l")
plot(abscissa[2:(NT-1)],rappincX2,xlab="t",ylab="second differences x",type="l")
par(mfrow=c(2,2),mar=c(6,5,2,1),mex=0.6, mgp=c(2.2,0.7,0),pty="m", font.main=1,font.lab=1, font.axis=1,cex.lab=1.3,cex.axis=1)
plot(abscissa,Xobs0,xlab="t",ylab="observed data")
points(truecurve$Abscissa,truecurve$X0vera,type='l',col="orange",lwd=3)
plot(abscissa[2:(NT-1)],rappincX1,xlab="t",ylab="first differences x",type="l")
points(truecurve$Abscissa,truecurve$X1vera,type='l',col="orange",lwd=3)
plot(abscissa[2:(NT-1)],rappincX2,xlab="t",ylab="second differences x",type="l")
points(truecurve$Abscissa,truecurve$X2vera,type='l',col="orange",lwd=3)
# Set parameters
m <- 5           # spline order
degree <- m-1    # spline degree
nbasis <- 9
# Create the basis
help(create.bspline.basis)
basis <- create.bspline.basis(rangeval=c(0,1), nbasis=nbasis, norder=m)
# If breaks are not provided, equispaced knots are created
names(basis)
# Evaluate the basis on the grid of abscissa
basismat<- eval.basis(abscissa, basis)
dim(basismat)
head(basismat)
# Fit via LS
help(lsfit)
lsfit(basismat, Xobs0, intercept=FALSE)$coef
Xsp0 <- basismat %*% lsfit(basismat, Xobs0, intercept=FALSE)$coef
par(mfrow=c(1,1))
plot(abscissa,Xobs0,xlab="t",ylab="observed data")
points(abscissa,Xsp0 ,type="l",col="blue",lwd=2)
abline(v=basis$params)
help(smooth.basis)
Xsp <- smooth.basis(argvals=abscissa, y=Xobs0, fdParobj=basis)
Xsp0bis <- eval.fd(abscissa, Xsp$fd) #  the curve smoothing the data
Xsp1bis <- eval.fd(abscissa, Xsp$fd, Lfd=1) # first derivative
Xsp2bis <- eval.fd(abscissa, Xsp$fd, Lfd=2) # second derivative
df <- Xsp$df   #  the degrees of freedom in the smoothing curve
df
library(KernSmooth)
help(locpoly)
m <- 5           # order of the polynomial
degree <- m-1    # degree of the polynomial
bw <- 0.05 # bandwidth
Xsm0 <- locpoly(abscissa, Xobs0, degree=degree,
bandwidth=bw, gridsize=length(abscissa),
range.x=range(abscissa))
Xsm0 <- Xsm0$y
par(mfrow=c(1,1))
plot(abscissa,Xobs0,xlab="t",ylab="observed data")
points(abscissa,Xsm0 ,type="l",col="blue")
library(KernSmooth)
help(locpoly)
m <- 5           # order of the polynomial
degree <- m-1    # degree of the polynomial
bw <- 0.05 # bandwidth
Xsm0 <- locpoly(abscissa, Xobs0, degree=degree,
bandwidth=bw, gridsize=length(abscissa),
range.x=range(abscissa))
Xsm0 <- Xsm0$y
par(mfrow=c(1,1))
plot(abscissa,Xobs0,xlab="t",ylab="observed data")
points(abscissa,Xsm0 ,type="l",col="blue")
points(abscissa,truecurve$X0vera,type="l")
# compute the central finite differences
rappincX1 <- (Xobs0[3:NT]-Xobs0[1:(NT-2)])/(abscissa[3:NT]-abscissa[1:(NT-2)])
rappincX2 <- ((Xobs0[3:NT]-Xobs0[2:(NT-1)])/(abscissa[3:NT]-abscissa[2:(NT-1)])-(Xobs0[2:(NT-1)]-Xobs0[1:(NT-2)])/(abscissa[2:(NT-1)]-abscissa[1:(NT-2)]))*2/(abscissa[3:(NT)]-abscissa[1:(NT-2)])
par(mfrow=c(2,2),mar=c(6,5,2,1),mex=0.6, mgp=c(2.2,0.7,0),pty="m", font.main=1,font.lab=1, font.axis=1,cex.lab=1.3,cex.axis=1)
plot(abscissa,Xobs0,xlab="t",ylab="observed data")
plot(abscissa[2:(NT-1)],rappincX1,xlab="t",ylab="first differences x",type="l")
plot(abscissa[2:(NT-1)],rappincX2,xlab="t",ylab="second differences x",type="l")
par(mfrow=c(2,2),mar=c(6,5,2,1),mex=0.6, mgp=c(2.2,0.7,0),pty="m", font.main=1,font.lab=1, font.axis=1,cex.lab=1.3,cex.axis=1)
plot(abscissa,Xobs0,xlab="t",ylab="observed data")
points(truecurve$Abscissa,truecurve$X0vera,type='l',col="orange",lwd=3)
# Choice 3: compromise between 1 and 2
basis.3 <- create.fourier.basis(rangeval=c(0,365),nbasis=109)
bbasis.3
basis.3
plot.fd(data_W.fd.3)
setwd("C:/Users/gianm/Desktop/TDEApplied/Old exams (in English)/190719/genalti")
rm(list = ls())
df <- read.table('watertemp.txt')
head(df)
dim(df)
matplot(t(df[,-366]), type = 'l')
rm(list = ls())
df <- read.table('watertemp.txt')
head(df)
dim(df)
setwd("C:/Users/gianm/Desktop/TDEApplied/Old exams (in English)/190719")
rm(list = ls())
df <- read.table('watertemp.txt')
head(df)
dim(df)
matplot(t(df[,-366]), type = 'l')
data_W <- t(df[,-366])
time <- 1:365
basis.1 <- create.fourier.basis(rangeval=c(0,365),nbasis=45)
data_W.fd.1 <- Data2fd(y = data_W,argvals = time,basisobj = basis.1)
plot.fd(data_W.fd.1)
data_W.fd.1$coefs[1:3,1:2]
pca_W.1 <- pca.fd(data_W.fd.1,nharm=5,centerfns=TRUE)
pca_W.1$values[1:5]
# scree plot
# pca.fd computes all the 365 eigenvalues, but only the first
# N-1=131 are non-null
plot(pca_W.1$values[1:45],xlab='j',ylab='Eigenvalues')
basis.3 <- create.fourier.basis(rangeval=c(0,365),nbasis=109)
data_W.fd.3 <- Data2fd(y = data_W,argvals = time,basisobj = basis.3)
plot.fd(data_W.fd.3)
setwd("C:/Users/gianm/Desktop/TDEApplied/Labs/Extra-FDA")
setwd("D:/RTDA/Didattica/Applied Statistics MATE 19-20/Moduli/Lab_FDA")
library(fda)
# First dataset: canadian weather
# daily temperatures recorded in 35 weather stations of Canada
# (data are averages over 35 years - 1960 to 1994)
help(CanadianWeather)
data_W <- CanadianWeather$dailyAv[,,1]
head(data_W)
dim(data_W)
matplot(data_W,type='l',main='Canadian temperature',xlab='Day',ylab='Temperature')
time <- 1:365
# Choice 1: we set a high dimensional basis (interpolating)
# Pros: no loss of information
# Cons: possible overfitting
basis.1 <- create.fourier.basis(rangeval=c(0,365),nbasis=365)
data_W.fd.1 <- Data2fd(y = data_W,argvals = time,basisobj = basis.1)
plot.fd(data_W.fd.1)
# Choice 2: reduced dimensionality (we set a low dimensional basis)
# Pros: the data are much smoother and the measurement error is filtered
# Cons: I could have lost important information
basis.2 <- create.fourier.basis(rangeval=c(0,365),nbasis=21)
data_W.fd.2 <- Data2fd(y = data_W,argvals = time,basisobj = basis.2)
plot.fd(data_W.fd.2)
# Choice 3: compromise between 1 and 2
basis.3 <- create.fourier.basis(rangeval=c(0,365),nbasis=109)
data_W.fd.3 <- Data2fd(y = data_W,argvals = time,basisobj = basis.3)
plot.fd(data_W.fd.3)
# estimate of the mean and of the covariance kernel
library(fields)
x11(width=10)
x11(width=10)
par(mfrow=c(2,3))
#mean
plot.fd(data_W.fd.1)
lines(mean(data_W.fd.1),lwd=3)
plot.fd(data_W.fd.2)
lines(mean(data_W.fd.2),lwd=2)
plot.fd(data_W.fd.3)
lines(mean(data_W.fd.3),lwd=2)
