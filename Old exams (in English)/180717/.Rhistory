y  <- seq(min(rr), max(rr), length=300)
xy <- expand.grid(V1=x, V2=y)
z  <- predict(class, xy)$post
contour(x, y, matrix(z, 300), levels=0, drawlabels=F, add=T)
z
class <- lda(df[,c(2,3)],df[,5], prior = prior.c)
class$prior
#    No       Yes
#0.7366667 0.2633333
fitted <- predict(class)
tab <- table(pain,fitted$class)
tab
#pain    No  Yes
#No     214   7
#Yes     11  68
par(mfrow = c(1,2))
plot(pul, rr, col = factor(pain), pch = 16)
plot(pul, rr, col = factor(fitted$class), pch = 16)
plot(class, dimen = 2, type = "b")
x11()
plot(pul, rr, col = factor(fitted$class), pch = 16)
x  <- seq(min(pul), max(pul), length=300)
y  <- seq(min(rr), max(rr), length=300)
xy <- expand.grid(V1=x, V2=y)
z  <- predict(class, xy)$post
z1 <- z[,1] - z[,2]
z2 <- z[,2] - z[,1]
contour(x, y, matrix(z, 300), levels=0, drawlabels=F, add=T)
APER <- (tab[1,2] + tab[2,1])/length(pain)
#APER = 0.06
class <- lda(df[,c(2,3)],df[,5], prior = prior.c)
class$prior
class <- lda(df[,c(2,3)],df[,5])
class$prior
#    No       Yes
#0.7366667 0.2633333
fitted <- predict(class)
tab <- table(pain,fitted$class)
tab
#pain    No  Yes
#No     214   7
#Yes     11  68
par(mfrow = c(1,2))
plot(pul, rr, col = factor(pain), pch = 16)
plot(pul, rr, col = factor(fitted$class), pch = 16)
plot(class, dimen = 2, type = "b")
x11()
plot(pul, rr, col = factor(fitted$class), pch = 16)
x  <- seq(min(pul), max(pul), length=300)
y  <- seq(min(rr), max(rr), length=300)
xy <- expand.grid(V1=x, V2=y)
z  <- predict(class, xy)$post
z1 <- z[,1] - z[,2]
x11()
plot(pul, rr, col = factor(fitted$class), pch = 16)
x  <- seq(min(df[,2]), max(df[,2]), length=300)
y  <- seq(min(df[,3]), max(df[,3]), length=300)
xy <- expand.grid(V1=x, V2=y)
z  <- predict(class, xy)$post
z1 <- z[,1] - z[,2]
z2 <- z[,2] - z[,1]
contour(x, y, matrix(z, 300), levels=0, drawlabels=F, add=T)
z
head(df)
plot(pul, rr, col = factor(fitted$class), pch = 16)
x  <- seq(min(df[,2]), max(df[,2]), length=300)
y  <- seq(min(df[,3]), max(df[,3]), length=300)
xy <- expand.grid(Pulse=x, Respiratory.rate=y)
z  <- predict(class, xy)$post
z1 <- z[,1] - z[,2]
z2 <- z[,2] - z[,1]
contour(x, y, matrix(z1, 200), levels=0, drawlabels=F, add=T)
contour(x, y, matrix(z2, 200), levels=0, drawlabels=F, add=T)
z  <- predict(class, xy)$post
z1 <- z[,1] - z[,2]
z2 <- z[,2] - z[,1]
contour(x, y, matrix(z1, 200), levels=0, drawlabels=F, add=T)
contour(x, y, matrix(z2, 200), levels=0, drawlabels=F, add=T)
z
plot(pul, rr, col = factor(fitted$class), pch = 16)
x  <- seq(min(df[,2]), max(df[,2]), length=300)
y  <- seq(min(df[,3]), max(df[,3]), length=300)
xy <- expand.grid(Pulse=x, Respiratory.rate=y)
z  <- predict(class, xy)$post
z1 <- z[,1] - z[,2]
z2 <- z[,2] - z[,1]
contour(x, y, matrix(z1, 200), levels=0, drawlabels=F, add=T)
z
z1
contour(x, y, matrix(z1, 300), levels=0, drawlabels=F, add=T)
contour(x, y, matrix(z2, 300), levels=0, drawlabels=F, add=T)
x11()
plot(pul, rr, col = factor(fitted$class), pch = 16)
x  <- seq(min(df[,2]), max(df[,2]), length=300)
y  <- seq(min(df[,3]), max(df[,3]), length=300)
xy <- expand.grid(Pulse=x, Respiratory.rate=y)
z  <- predict(class, xy)$post
z1 <- z[,1] - z[,2]
z2 <- z[,2] - z[,1]
contour(x, y, matrix(z1, 300), levels=0, drawlabels=F, add=T)
contour(x, y, matrix(z2, 300), levels=0, drawlabels=F, add=T)
APER <- (tab[1,2] + tab[2,1])/length(pain)
setwd("C:/Users/gianm/Desktop/TDEApplied/Old exams (in English)/180717")
df <- read.table("castle.txt")
#(Lat = 45:733,
#Long = 7:333).
head(df)
help(t.test)
t.test(df[,1], df[,2], alternative = "two.sided", paired = TRUE, mu = c(45.733,7.333))
t1 <- df[,1]
t2 <- df[,2]
n1 <- dim(t1)[1] # n1=3
n2 <- dim(t2)[1] # n2=4
p  <- dim(t1)[2] # p=2
# we compute the sample mean, covariance matrices and the matrix
# Spooled
t1.mean <- sapply(t1,mean)
t2.mean <- sapply(t2,mean)
t1.cov  <-  cov(t1)
t2.cov  <-  cov(t2)
Sp      <- ((n1-1)*t1.cov + (n2-1)*t2.cov)/(n1+n2-2)
# we compare the matrices
list(S1=t1.cov, S2=t2.cov, Spooled=Sp)
# Test H0: mu1 == mu2  vs  H1: mu1 != mu2
# i.e.,
# Test H0: mu1-mu2 == c(0,0)  vs  H1: mu1-mu2 != c(0,0)
alpha   <- .01
delta.0 <- c(0,0)
Spinv   <- solve(Sp)
T2 <- n1*n2/(n1+n2) * (t1.mean-t2.mean-delta.0) %*% Spinv %*% (t1.mean-t2.mean-delta.0)
cfr.fisher <- (p*(n1+n2-2)/(n1+n2-1-p))*qf(1-alpha,p,n1+n2-1-p)
T2 < cfr.fisher # TRUE: no statistical evidence to reject H0 at level 1%
P <- 1 - pf(T2/(p*(n1+n2-2)/(n1+n2-1-p)), p, n1+n2-1-p)
P
# P-value high (we don't reject at 1%,5%,10%)
# Simultaneous T2 intervals
IC.T2.X1 <- c(t1.mean[1]-t2.mean[1]-sqrt(cfr.fisher*Sp[1,1]*(1/n1+1/n2)), t1.mean[1]-t2.mean[1]+sqrt(cfr.fisher*Sp[1,1]*(1/n1+1/n2)) )
IC.T2.X2 <- c(t1.mean[2]-t2.mean[2]-sqrt(cfr.fisher*Sp[2,2]*(1/n1+1/n2)), t1.mean[2]-t2.mean[2]+sqrt(cfr.fisher*Sp[2,2]*(1/n1+1/n2)) )
IC.T2 <- rbind(IC.T2.X1, IC.T2.X2)
dimnames(IC.T2)[[2]] <- c('inf','sup')
IC.T2
t1
t1.cov  <-  cov(matrix(t1))
t2.cov  <-  cov(matrix(t2))
matrix(t1)
t1.cov  <-  cov(vector(t1))
t1.cov  <-  cov(as.vector(t1))
t1
t1.cov  <-  cov(c(t1))
help(matrix)
t1
t2
# we build the data
t1 <- matrix(c(3,3,1,6,2,3),2)
t1 <- data.frame(t(t1))
t2 <- matrix(c(2,3,5,1,3,1,2,3),2)
t2 <- data.frame(t(t2))
t1
t2
df <- read.table("castle.txt")
#(Lat = 45:733,
#Long = 7:333).
head(df)
t1 <- matrix(df)
n1 <- dim(t1)[1]
p  <- dim(t1)[2]
# we compute the sample mean, covariance matrices and the matrix
# Spooled
t1.mean <- sapply(t1,mean)
t1.cov  <-  cov(t1)
Sp      <- t1.cov/(n1-1)
# Test H0: mu1 == mu2  vs  H1: mu1 != mu2
# i.e.,
# Test H0: mu1-mu2 == c(0,0)  vs  H1: mu1-mu2 != c(0,0)
alpha   <- .05
delta.0 <- c(45.733,7.333)
Spinv   <- solve(Sp)
T2 <- n1/2 * (t1.mean - delta.0) %*% Spinv %*% (t1.mean-delta.0)
cfr.fisher <- (p*(n1+n2-2)/(n1+n2-1-p))*qf(1-alpha,p,n1+n2-1-p)
T2 < cfr.fisher # TRUE: no statistical evidence to reject H0 at level 1%
P <- 1 - pf(T2/(p*(n1+n1-2)/(n1+n1-1-p)), p, n1+n1-1-p)
P
# we compute the sample mean, covariance matrices and the matrix
# Spooled
t1
t1 <- as.matrix(df)
n1 <- dim(t1)[1]
p  <- dim(t1)[2]
# we compute the sample mean, covariance matrices and the matrix
# Spooled
t1
df <- read.table("castle.txt")
#(Lat = 45:733,
#Long = 7:333).
head(df)
t1 <- as.matrix(df)
n1 <- dim(t1)[1]
p  <- dim(t1)[2]
# we compute the sample mean, covariance matrices and the matrix
# Spooled
t1.mean <- sapply(t1,mean)
t1.cov  <-  cov(t1)
Sp      <- t1.cov/(n1-1)
# Test H0: mu1 == mu2  vs  H1: mu1 != mu2
# i.e.,
# Test H0: mu1-mu2 == c(0,0)  vs  H1: mu1-mu2 != c(0,0)
alpha   <- .05
delta.0 <- c(45.733,7.333)
Spinv   <- solve(Sp)
T2 <- n1/2 * (t1.mean - delta.0) %*% Spinv %*% (t1.mean-delta.0)
cfr.fisher <- (p*(n1+n2-2)/(n1+n2-1-p))*qf(1-alpha,p,n1+n2-1-p)
T2 < cfr.fisher # TRUE: no statistical evidence to reject H0 at level 1%
P <- 1 - pf(T2/(p*(n1+n1-2)/(n1+n1-1-p)), p, n1+n1-1-p)
P
# P-value high (we don't reject at 1%,5%,10%)
# Simultaneous T2 intervals
IC.T2.X1 <- c(t1.mean[1]-t2.mean[1]-sqrt(cfr.fisher*Sp[1,1]*(1/n1+1/n2)), t1.mean[1]-t2.mean[1]+sqrt(cfr.fisher*Sp[1,1]*(1/n1+1/n2)) )
IC.T2.X2 <- c(t1.mean[2]-t2.mean[2]-sqrt(cfr.fisher*Sp[2,2]*(1/n1+1/n2)), t1.mean[2]-t2.mean[2]+sqrt(cfr.fisher*Sp[2,2]*(1/n1+1/n2)) )
IC.T2 <- rbind(IC.T2.X1, IC.T2.X2)
dimnames(IC.T2)[[2]] <- c('inf','sup')
IC.T2
t1.mean
tapply(t1,mean)
mean(t1)
sapply(t1,mean)
help("sapply")
help("lapply")
help("tapply")
t1.mean <- colMeans(t1)
df <- read.table("castle.txt")
#(Lat = 45:733,
#Long = 7:333).
head(df)
t1 <- as.matrix(df)
n1 <- dim(t1)[1]
p  <- dim(t1)[2]
# we compute the sample mean, covariance matrices and the matrix
# Spooled
t1.mean <- colMeans(t1)
t1.cov  <-  cov(t1)
Sp      <- t1.cov/(n1-1)
# Test H0: mu1 == mu2  vs  H1: mu1 != mu2
# i.e.,
# Test H0: mu1-mu2 == c(0,0)  vs  H1: mu1-mu2 != c(0,0)
alpha   <- .05
delta.0 <- c(45.733,7.333)
Spinv   <- solve(Sp)
T2 <- n1/2 * (t1.mean - delta.0) %*% Spinv %*% (t1.mean-delta.0)
cfr.fisher <- (p*(n1+n2-2)/(n1+n2-1-p))*qf(1-alpha,p,n1+n2-1-p)
T2 < cfr.fisher # TRUE: no statistical evidence to reject H0 at level 1%
P <- 1 - pf(T2/(p*(n1+n1-2)/(n1+n1-1-p)), p, n1+n1-1-p)
P
T^2
T2
cfr.fisher
df <- read.table("castle.txt")
#(Lat = 45:733,
#Long = 7:333).
head(df)
t1 <- as.matrix(df)
n1 <- dim(t1)[1]
p  <- dim(t1)[2]
# we compute the sample mean, covariance matrices and the matrix
# Spooled
t1.mean <- colMeans(t1)
t1.cov  <-  cov(t1)
Sp      <- t1.cov/(n1-1)
# Test H0: mu1 == mu2  vs  H1: mu1 != mu2
# i.e.,
# Test H0: mu1-mu2 == c(0,0)  vs  H1: mu1-mu2 != c(0,0)
alpha   <- .05
delta.0 <- c(45.733,7.333)
Spinv   <- solve(Sp)
T2 <- n1/2 * (t1.mean - delta.0) %*% Spinv %*% (t1.mean-delta.0)
cfr.fisher <- (p*(n1+n1-2)/(n1+n1-1-p))*qf(1-alpha,p,n1+n1-1-p)
T2 < cfr.fisher # TRUE: no statistical evidence to reject H0 at level 1%
P <- 1 - pf(T2/(p*(n1+n1-2)/(n1+n1-1-p)), p, n1+n1-1-p)
P
T2
cfr.fisher
Sp
t1.cov
cov(t1)
shapiro.test(df[,1])
shapiro.test(df[,2])
n <- dim(df)[1]
p <- dim(df)[2]
center <- c(45.733, 7.333)
alpha <- .01
x.mean   <- colMeans(df)
x.cov    <- cov(df)
x.invcov <- solve(x.cov)
x.T2       <- n * (x.mean-center) %*% x.invcov %*% (x.mean-center)
cfr.fisher <- ((n-1)*p/(n-p))*qf(1-alpha,p,n-p)
x.T2 < cfr.fisher
P <- 1-pf(x.T2*(n-p)/((n-1)*p), p, n-p)
P
cfr.chisq <- qchisq(1-alpha,p)
r <- sqrt(cfr.chisq)
r*sqrt(eigen(x.cov)$values)
library(car)
plot(data, xlim = c(45.68,45.78), ylim = c(7.20,7.5))
ellipse(center, shape=x.cov, sqrt(cfr.chisq), col = 'blue', lty = 2, center.pch = 4, center.cex=1.5, lwd=2)
points(center[1], center[2], pch = 4, cex = 1.5, lwd = 2, col ='blue')
eigen(x.cov)$vectors
# Length of the semi-axes of the ellipse:
cfr.chisq <- qchisq(1-alpha,p)
r <- sqrt(cfr.chisq)
r*sqrt(eigen(x.cov)$values)
library(car)
plot(data, xlim = c(45.68,45.78), ylim = c(7.20,7.5))
ellipse(center, shape=x.cov, sqrt(cfr.chisq), col = 'blue', lty = 2, center.pch = 4, center.cex=1.5, lwd=2)
points(center[1], center[2], pch = 4, cex = 1.5, lwd = 2, col ='blue')
plot(data, xlim = c(45.68,45.78), ylim = c(7.20,7.5))
# il centro Ã¨ Aosta
eigen(x.cov)$vectors
# Length of the semi-axes of the ellipse:
cfr.chisq <- qchisq(1-alpha,p)
r <- sqrt(cfr.chisq)
r*sqrt(eigen(x.cov)$values)
library(car)
plot(df, xlim = c(45.68,45.78), ylim = c(7.20,7.5))
ellipse(center, shape=x.cov, sqrt(cfr.chisq), col = 'blue', lty = 2, center.pch = 4, center.cex=1.5, lwd=2)
points(center[1], center[2], pch = 4, cex = 1.5, lwd = 2, col ='blue')
setwd("C:/Users/gianm/Desktop/TDEApplied/Old exams (in English)/180717")
df <- read.table("albatross.txt")
head(df)
mod <- lm(distance ~ factor(wind) + I(Va) + I(Va):factor(wind) + I(Vi) + I(Vi):factor(wind), data = df)
summary(mod)
mod <- lm(distance ~ wind + I(Va) + I(Va):factor(wind) + I(Vi) + I(Vi):factor(wind), data = df)
mod <- lm(distance ~ wind + I(Va) + I(Va):wind + I(Vi) + I(Vi):wind, data = df)
summary(mod)
wind
df$wind
mod <- lm(distance ~ wind + I(Va) + I(Va):wind + I(Vi) + I(Vi):wind, data = df)
summary(mod)
coefs <- coef(mod)
alpha.1 <- coefs[1] + coefs[2]
alpha.2 <- coefs[1]
beta.1  <- coefs[3] + coefs[2]
beta.2  <- coefs[3]
gamma.1 <- coefs[4] + coefs[2]
gamma.2 <- coefs[4]
sigma   <- mod$residuals
vif(mod)
plot(mod)
par(mfrow = c(2,2))
plot(mod)
summary(mod)
mod2 <- lm(distance ~ wind + I(Va) + I(Vi), data = df)
summary(mod2)
par(mfrow = c(2,2))
plot(mod)
shapiro.test(mod2$residuals)
shapiro.test(mod$residuals)
vif(mod)
vif(mod2)
shapiro.test(mod2$residuals)
par(mfrow = c(2,2))
plot(mod2)
linearHypothesis(mod2, c(0,0,1,1), 0)
summary(mod2)
coefs2 <- coef(mod2)
coefs2 <- coef(mod2)
alpha.1.bis <- coefs[1] + coefs[2]
alpha.2.bis <- coefs[1]
beta.bis    <- coefs[3]
gamma.bis   <- coefs[4]
newdata.up <- data.frame(wind = "upwind", Va = 35, Vi = 25)
newdata.down <- data.frame(wind = "downwind", Va = 35, Vi = 25)
pred1 <- predict(mod2, newdata.up)
pred1 <- predict(mod2, newdata.up)
pred2 <- predict(mod2, newdata.down)
help(predict)
pred1 <- predict(mod2, newdata.up, interval = 'prediction', conf.level = 0.99)
pred1 <- predict(mod2, newdata.up, interval = 'prediction', conf.level = 0.99)
pred2 <- predict(mod2, newdata.down, interval = 'prediction', conf.level = 0.99)
pred1
pred2
df <- read.table("albatross.txt")
head(df)
mod <- lm(distance ~ wind + I(Va^2) + I(Va^2):wind + I(Vi^2) + I(Vi^2):wind, data = df)
summary(mod)
coefs <- coef(mod)
alpha.1 <- coefs[1] + coefs[2]
alpha.2 <- coefs[1]
beta.1  <- coefs[3] + coefs[2]
beta.2  <- coefs[3]
gamma.1 <- coefs[4] + coefs[2]
gamma.2 <- coefs[4]
sigma   <- mod$residuals
summary(mod)
shapiro.test(mod$residuals)
par(mfrow = c(2,2))
plot(mod)
vif(mod)
mod2 <- lm(distance ~ wind + I(Va) + I(Vi), data = df)
summary(mod2)
shapiro.test(mod2$residuals)
par(mfrow = c(2,2))
plot(mod2)
vif(mod2)
linearHypothesis(mod2, c(0,0,1,1), 0)
coefs2 <- coef(mod2)
alpha.1.bis <- coefs[1] + coefs[2]
alpha.2.bis <- coefs[1]
beta.bis    <- coefs[3]
gamma.bis   <- coefs[4]
newdata.up <- data.frame(wind = "upwind", Va = 35, Vi = 25)
newdata.down <- data.frame(wind = "downwind", Va = 35, Vi = 25)
pred1 <- predict(mod2, newdata.up, interval = 'prediction', conf.level = 0.99)
pred2 <- predict(mod2, newdata.down, interval = 'prediction', conf.level = 0.99)
pred1 # con upwind l'atterraggio sarÃ  sicuro in quanto l'upper bound nemmeno si avvicina ai 17 m necessari
pred2
mod2 <- lm(distance ~ wind + I(Va^2) + I(Vi^2), data = df)
summary(mod2)
shapiro.test(mod2$residuals)
par(mfrow = c(2,2))
plot(mod2)
vif(mod2)
linearHypothesis(mod2, c(0,0,1,1), 0)
coefs2 <- coef(mod2)
alpha.1.bis <- coefs[1] + coefs[2]
alpha.2.bis <- coefs[1]
beta.bis    <- coefs[3]
gamma.bis   <- coefs[4]
newdata.up <- data.frame(wind = "upwind", Va = 35, Vi = 25)
newdata.down <- data.frame(wind = "downwind", Va = 35, Vi = 25)
pred1 <- predict(mod2, newdata.up, interval = 'prediction', conf.level = 0.99)
pred2 <- predict(mod2, newdata.down, interval = 'prediction', conf.level = 0.99)
pred1 # con upwind l'atterraggio sarÃ  sicuro in quanto l'upper bound nemmeno si avvicina ai 17 m necessari
pred2 #
rm(list = ls())
data <- read.table("albatross.txt")
head(data)
summary(data)
data$wind <- as.factor(data$wind)
fit <- lm(distance ~ wind*I(Vi^2) + wind*I(Va^2), data = data)
summary(fit)
library(car)
fit2 <- lm(distance ~ I(Vi^2) + I(Va^2) + wind:I(Vi^2) + wind:I(Va^2), data = data)
summary(fit2)
A <- rbind(c(0,1,1,1,1),
c(0,1,1,0,0))
b <- rbind(0,0)
linearHypothesis(fit2, A, b)
fit3 <- lm(distance ~ I(Va^2-Vi^2) + wind:I(Va^2-Vi^2), data = data)
summary(fit3)
newdatum <- data.frame(Vi = 25, Va = 35, wind = as.factor("upwind"))
newdatum1 <- data.frame(Vi = 25, Va = 35, wind = as.factor("downwind"))
predict(fit3, newdatum, interval = "prediction", level = 0.995)
predict(fit3, newdatum1, interval = "prediction", level = 0.995)
linearHypothesis(mod2, c(0,0,1,1), 0)
df <- read.table("albatross.txt")
head(df)
mod <- lm(distance ~ wind + I(Va^2) + I(Va^2):wind + I(Vi^2) + I(Vi^2):wind, data = df)
summary(mod)
coefs <- coef(mod)
alpha.1 <- coefs[1] + coefs[2]
alpha.2 <- coefs[1]
beta.1  <- coefs[3] + coefs[2]
beta.2  <- coefs[3]
gamma.1 <- coefs[4] + coefs[2]
gamma.2 <- coefs[4]
sigma   <- mod$residuals
summary(mod)
shapiro.test(mod$residuals)
par(mfrow = c(2,2))
plot(mod)
vif(mod)
#     wind         I(Va^2)      I(Vi^2)   wind:I(Va^2) wind:I(Vi^2)
#   27.337153     2.454626     2.842735    44.262826    16.203174
mod2 <- lm(distance ~ wind + I(Va^2) + I(Vi^2), data = df)
summary(mod2)
shapiro.test(mod2$residuals)
par(mfrow = c(2,2))
plot(mod2)
vif(mod2)
# abbiamo risolto i problemi di collinearitÃ  e mantenuto un modello dalle ipotesi verificate
linearHypothesis(mod2, c(0,0,1,1), 0)
# rifiuto H1, quindi accetto che siano opposti beta.1 e gamma.1
coefs2 <- coef(mod2)
alpha.1.bis <- coefs[1] + coefs[2]
alpha.2.bis <- coefs[1]
beta.bis    <- coefs[3]
gamma.bis   <- coefs[4]
newdata.up <- data.frame(wind = "upwind", Va = 35, Vi = 25)
newdata.down <- data.frame(wind = "downwind", Va = 35, Vi = 25)
pred1 <- predict(mod2, newdata.up, interval = 'prediction', conf.level = 0.99)
pred2 <- predict(mod2, newdata.down, interval = 'prediction', conf.level = 0.99)
pred1 # con upwind l'atterraggio sarÃ  sicuro in quanto l'upper bound nemmeno si avvicina ai 17 m necessari
pred2 # con downwind non si potrÃ  garantire la sicurezza nell'atterraggio, l'upper bound Ã¨ decisamente piÃ¹ alto
# (22.58 m) e la predizione puntuale stessa Ã¨ maggiore di 17 m essendo 18.22 m
# rifiuto H1, quindi accetto che siano opposti beta.1 e gamma.1
mod3 <- lm(distance ~ wind + I(Va^2-Vi^2), data = df)
coefs2 <- coef(mod3)
alpha.1.bis <- coefs[1] + coefs[2]
alpha.2.bis <- coefs[1]
beta.bis    <- coefs[3]
gamma.bis   <- coefs[4]
newdata.up <- data.frame(wind = "upwind", Va = 35, Vi = 25)
newdata.down <- data.frame(wind = "downwind", Va = 35, Vi = 25)
pred1 <- predict(mod3, newdata.up, interval = 'prediction', conf.level = 0.99)
pred2 <- predict(mod3, newdata.down, interval = 'prediction', conf.level = 0.99)
pred1 # con upwind l'atterraggio sarÃ  sicuro in quanto l'upper bound nemmeno si avvicina ai 17 m necessari
pred2 # con downwind non si potrÃ  garantire la sicurezza nell'atterraggio, l'upper bound Ã¨ decisamente piÃ¹ alto
# (22.58 m) e la predizione puntuale stessa Ã¨ maggiore di 17 m essendo 18.22 m
summary(mod3)
shapiro.test(mod3$residuals)
par(mfrow = c(2,2))
plot(mod3)
vif(mod3)
