shapiro.test(result$residuals)
# Overall model
# H0: beta1 = beta2 = beta3 = 0
# test statistic
T0_glob <- summary(result)$f[1]
T0_glob
# permutations
permutazione <- sample(n)
Y.perm.glob <- Y[permutazione]
# in this case permuting the responses or the residuals is the same
res.H0glob <- Y - mean(Y)
Y.perm.glob
mean(Y) + res.H0glob[permutazione]
X11()
layout(matrix(1:6,nrow=3,byrow=FALSE))
plot(x1,Y,main='Y vs x1 (original data)',pch=16)
plot(x2,Y,main='Y vs x2 (original data)',pch=16)
plot(x3,Y,main='Y vs x3 (original data)',pch=16)
plot(x1,Y.perm.glob,main='Y vs x1 (permuted data)',pch=16)
plot(x2,Y.perm.glob,main='Y vs x2 (permuted data)',pch=16)
plot(x3,Y.perm.glob,main='Y vs x3 (permuted data)',pch=16)
# Test on variable x1
# H0: beta1 = 0
# test statistic
summary(result)$coefficients
T0_x1 <- abs(summary(result)$coefficients[2,3])
T0_x1
# permutations
# residuals of the reduced model
# reduced model:
# Y = beta0 + beta2*x2 + beta3*x3
regr.H01 <- lm(Y ~ x2 + x3)
residui.H01 <- regr.H01$residuals
residui.H01.perm <- residui.H01[permutazione]
# permuted y:
Y.perm.H01 <- regr.H01$fitted + residui.H01.perm
X11()
layout(matrix(1:6,nrow=3,byrow=FALSE))
plot(x1,Y,main='Y vs x1 (original data)',pch=16)
plot(x2,Y,main='Y vs x2 (original data)',pch=16)
plot(x3,Y,main='Y vs x3 (original data)',pch=16)
plot(x1,Y.perm.H01,main='Y vs x1 (permuted data)',pch=16)
plot(x2,Y.perm.H01,main='Y vs x2 (permuted data)',pch=16)
plot(x3,Y.perm.H01,main='Y vs x3 (permuted data)',pch=16)
# Test on variable x2
# H0: beta2 = 0
# test statistic
summary(result)$coefficients
T0_x2 <- abs(summary(result)$coefficients[3,3])
T0_x2
# permutations
# residuals of the reduced model
# reduced model:
# Y = beta0 + beta1*x1 + beta3*x3
regr.H02 <- lm(Y ~ x1 + x3)
residui.H02 <- regr.H02$residuals
residui.H02.perm <- residui.H02[permutazione]
# permuted y:
Y.perm.H02 <- regr.H02$fitted + residui.H02.perm
X11()
layout(matrix(1:6,nrow=3,byrow=FALSE))
plot(x1,Y,main='Y vs x1 (original data)',pch=16)
plot(x2,Y,main='Y vs x2 (original data)',pch=16)
plot(x3,Y,main='Y vs x3 (original data)',pch=16)
plot(x1,Y.perm.H02,main='Y vs x1 (permuted data)',pch=16)
plot(x2,Y.perm.H02,main='Y vs x2 (permuted data)',pch=16)
plot(x3,Y.perm.H02,main='Y vs x3 (permuted data)',pch=16)
# Test on variable x3
# H0: beta3 = 0
# test statistic
summary(result)$coefficients
T0_x3 <- abs(summary(result)$coefficients[4,3])
T0_x3
# permutations
# residuals of the reduced model
# reduced model:
# Y = beta0 + beta1*x1 + beta2*x2
regr.H03 <- lm(Y ~ x1 + x2)
residui.H03 <- regr.H03$residuals
residui.H03.perm <- residui.H03[permutazione]
# permuted y:
Y.perm.H03 <- regr.H03$fitted + residui.H03.perm
X11()
layout(matrix(1:6,nrow=3,byrow=FALSE))
plot(x1,Y,main='Y vs x1 (original data)',pch=16)
plot(x2,Y,main='Y vs x2 (original data)',pch=16)
plot(x3,Y,main='Y vs x3 (original data)',pch=16)
plot(x1,Y.perm.H03,main='Y vs x1 (permuted data)',pch=16)
plot(x2,Y.perm.H03,main='Y vs x2 (permuted data)',pch=16)
plot(x3,Y.perm.H03,main='Y vs x3 (permuted data)',pch=16)
# p-values of the tests
B <- 1000
T_H0glob <- T_H01 <- T_H02 <- T_H03 <- numeric(B)
for(perm in 1:B){
permutazione <- sample(n)
Y.perm.glob <- Y[permutazione]
T_H0glob[perm] <- summary(lm(Y.perm.glob ~ x1 + x2 + x3))$f[1]
residui.H01.perm <- residui.H01[permutazione]
Y.perm.H01 <- regr.H01$fitted + residui.H01.perm
T_H01[perm] <- abs(summary(lm(Y.perm.H01 ~ x1 + x2 + x3))$coefficients[2,3])
residui.H02.perm <- residui.H02[permutazione]
Y.perm.H02 <- regr.H02$fitted + residui.H02.perm
T_H02[perm] <- abs(summary(lm(Y.perm.H02 ~ x1 + x2 + x3))$coefficients[3,3])
residui.H03.perm <- residui.H03[permutazione]
Y.perm.H03 <- regr.H03$fitted + residui.H03.perm
T_H03[perm] <- abs(summary(lm(Y.perm.H03 ~ x1 + x2 + x3))$coefficients[4,3])
}
sum(T_H0glob>=T0_glob)/B
sum(T_H01>=T0_x1)/B
sum(T_H02>=T0_x2)/B
sum(T_H03>=T0_x3)/B
summary(result)
data <- read.table('cemento.txt', header=T)
head(data)
n <- dim(data)[1]
attach(data)
# first model:
# Y = beta0 + beta1*Al + beta2*Sil
Al <- Alluminio
Sil <- Silicato_bic
Y  <- Durezza_cemento
detach(data)
# parametric inference
result <- lm(Y ~ Al + Sil)
summary(result)
data <- read.table('cemento.txt', header=T)
head(data)
#####################################
####      PERMUTATION TESTS      ####
##   TWO INDEPENDENT POPULATIONS   ##
#####################################
rm(list=ls())
setwd('/Users/simone/Documents/Università/Didattica e divulgazione/Numerical and Statistical Methods for Geosciences/2018-19/Permutation Test - Euclidean')
# We sample n1 data from a first population X1
# and n2 data froma second population  X2
# Test:
# H0:  X1 =^d  X2
# H1:  X1 !=^d X2
# Case 1. H0 FALSE
# To understand the behaviour of the test, we sample from two populations
# with different means
# Parameters:
n1 <- n2 <- 10
n <- n1 + n2
# Simulation:
set.seed(240279)
x1 <- runif(n1,0,4)
x2 <- runif(n2,0,4)+3
x1
x2
x_pooled <- c(x1,x2)
par(mfrow=c(1,2))
boxplot(x1,x2,main='Original data')
# How data change if we apply one random permutation?
permutation <- sample(1:n)
# How data change if we apply one random permutation?
permutation
x_perm <- x_pooled[permutation]
x_perm
x1_perm <- x_perm[1:n1]
x2_perm <- x_perm[(n1+1):n]
boxplot(x1_perm,x2_perm,main='Permuted data')
abs(mean(x1)-mean(x2))
abs(mean(x1_perm)-mean(x2_perm))
T0 <- abs(mean(x1) - mean(x2))
T0
factorial(n)
# Number of distinct values of T*:
factorial(n)/(2*factorial(n1)*factorial(n2))
B <- 100000 # Number of permutations
T_stat <- numeric(B) # Vector where we will store the values of T*
B <- 100000 # Number of permutations
T_stat <- numeric(B) # Vector where we will store the values of T*
for(perm in 1:B){
# permutation:
permutation <- sample(1:n)
x_perm <- x_pooled[permutation]
x1_perm <- x_perm[1:n1]
x2_perm <- x_perm[(n1+1):n]
# test statistic:
T_stat[perm] <- abs(mean(x1_perm) - mean(x2_perm))
}
layout(1)
hist(T_stat,xlim=range(c(T_stat,T0)),breaks=30)
abline(v=T0,col=3,lwd=2)
plot(ecdf(T_stat))
abline(v=T0,col=3,lwd=2)
p_val <- sum(T_stat>=T0)/B
p_val
# Simulation:
set.seed(240279)
x1 <- runif(n1,0,4)
x2 <- runif(n2,0,4)+0
x_pooled <- c(x1,x2)
par(mfrow=c(1,2))
boxplot(x1,x2,main='Original data')
# How data change if we apply one random permutation?
permutation <- sample(1:n)
x_perm <- x_pooled[permutation]
x1_perm <- x_perm[1:n1]
x2_perm <- x_perm[(n1+1):n]
boxplot(x1_perm,x2_perm,main='Permuted data')
abs(mean(x1)-mean(x2))
abs(mean(x1_perm)-mean(x2_perm))
# TEST
# Test statistic: absolute difference between the two means
T0 <- abs(mean(x1) - mean(x2))
T0
# Cardinality of the permutational space:
factorial(n)
# Number of distinct values of T*:
factorial(n)/(2*factorial(n1)*factorial(n2))
# Minimun achieveable p-value:
1/(factorial(n)/(2*factorial(n1)*factorial(n2)))
# CMC to estimate the p-value
B <- 100000 # Number of permutations
T_stat <- numeric(B) # Vector where we will store the values of T*
for(perm in 1:B){
# permutation:
permutation <- sample(1:n)
x_perm <- x_pooled[permutation]
x1_perm <- x_perm[1:n1]
x2_perm <- x_perm[(n1+1):n]
# test statistic:
T_stat[perm] <- abs(mean(x1_perm) - mean(x2_perm))
}
# Permutational distribution of T
layout(1)
hist(T_stat,xlim=range(c(T_stat,T0)),breaks=30)
abline(v=T0,col=3,lwd=2)
plot(ecdf(T_stat))
abline(v=T0,col=3,lwd=2)
# p-value
p_val <- sum(T_stat>=T0)/B
p_val
setwd('/Users/simone/Documents/Università/Didattica e divulgazione/Numerical and Statistical Methods for Geosciences/2018-19/Permutation Test - Euclidean')
# Example 1: Two (independent) multivariate population test
# Hourly accesses to AreaC: working days vs week-end days
d1 <- read.csv('accessi-orari-areac-2016-09-12-00_00_00.csv', header=T)
d2 <- read.csv('accessi-orari-areac-2016-09-13-00_00_00.csv', header=T)
d3 <- read.csv('accessi-orari-areac-2016-09-14-00_00_00.csv', header=T)
d4 <- read.csv('accessi-orari-areac-2016-09-15-00_00_00.csv', header=T)
d5 <- read.csv('accessi-orari-areac-2016-09-16-00_00_00.csv', header=T)
d6 <- read.csv('accessi-orari-areac-2016-09-17-00_00_00.csv', header=T)
d7 <- read.csv('accessi-orari-areac-2016-09-18-00_00_00.csv', header=T)
week <- rbind(d1[,2], d2[,2], d3[,2], d4[,2], d5[,2], d6[,2], d7[,2])
matplot(seq(0,47)/2,t(week), type='l', col=c(1,1,1,1,1,2,2), lty=1)
t1 <- week[1:5,]
t2 <- week[6:7,]
t1 <- week[1:5,]
t2 <- week[6:7,]
# Computing a proper test statistic
# (i.e., squared distance between the two sample mean vectors)
t1.mean <- colMeans(t1)
t2.mean <- colMeans(t2)
n1 <- dim(t1)[1]
n2 <- dim(t2)[1]
n  <- n1 + n2
T20 <- as.numeric((t1.mean-t2.mean) %*% (t1.mean-t2.mean))
T20
sqrt(T20)
# number of possible data point permutations
factorial(7)
# number of different values of the test statistic
choose(7,5)
B <- 100000
T2 <- numeric(B)
for(perm in 1:B){
# Random permutation of indexes
# When we apply permutations in a multivariate case, we keep the units together
# i.e., we only permute the rows of the data matrix
t_pooled <- rbind(t1,t2)
permutation <- sample(n)
t_perm <- t_pooled[permutation,]
t1_perm <- t_perm[1:n1,]
t2_perm <- t_perm[(n1+1):n,]
# Evaluation of the test statistic on permuted data
t1.mean_perm <- colMeans(t1_perm)
t2.mean_perm <- colMeans(t2_perm)
T2[perm]  <- (t1.mean_perm-t2.mean_perm) %*% (t1.mean_perm-t2.mean_perm)
}
# plotting the permutational distribution under H0
hist(T2,xlim=range(c(T2,T20)),breaks=1000)
abline(v=T20,col=3,lwd=4)
plot(ecdf(T2))
abline(v=T20,col=3,lwd=4)
p_val <- sum(T2>=T20)/B
p_val
#################################################################################?
# Example 2: Center of simmetry of one multivariate population
# Relative humidity in Milan during the summer months
hum <- read.csv2('307_Umidita_relativa_2008_2014.csv', header=T)
hum <- hum[,3]
hum <- matrix(hum, ncol=12, byrow=T)[,6:9]
boxplot(hum)
matplot(t(hum), type='l', lty=1)
# center of simmetry under H0
mu0      <- c(65, 65, 65, 65)
x.mean   <- colMeans(hum)
n <- dim(hum)[1]
p <- dim(hum)[2]
T20 <- as.numeric((x.mean-mu0) %*% (x.mean-mu0) )
T20
2^7
B <- 100000
T2 <- numeric(B)
for(perm in 1:B){
# In this case we use changes of signs in place of permutations
# Permuted dataset
signs.perm <- rbinom(n, 1, 0.5)*2 - 1
hum_perm <- mu0 + (hum - mu0) * matrix(signs.perm,nrow=n,ncol=p,byrow=FALSE)
x.mean_perm <- colMeans(hum_perm)
T2[perm]  <- (x.mean_perm-mu0)  %*% (x.mean_perm-mu0)
}
hist(T2,xlim=range(c(T2,T20)),breaks=100)
abline(v=T20,col=3,lwd=4)
plot(ecdf(T2))
abline(v=T20,col=3,lwd=4)
setwd('/Users/simone/Documents/Università/Didattica e divulgazione/Numerical and Statistical Methods for Geosciences/2018-19/Permutation Test - Euclidean')
# One-way ANOVA
# (p=1, g=6)
head(chickwts)
attach(chickwts)
summary(chickwts)
g <- nlevels(feed)
n <- dim(chickwts)[1]
layout(cbind(1,2))
plot(feed, weight, xlab='treat',col=rainbow(g),main='Original Data')
# H0: tau1 = tau2 = tau3 = tau4 = tau5 = tau6 = 0
# the chickens belong to the same population
n
table(feed)
# H1: (H0)^c
# the chickens belong to several different population
# Parametric test:
fit <- aov(weight ~ feed)
summary(fit)
# Permutation test:
# Test statistic: F stat
T0 <- summary(fit)[[1]][1,4]
T0
# what happens if we permute the data?
permutazione <- sample(1:n)
weight_perm <- weight[permutazione]
fit_perm <- aov(weight_perm ~ feed)
summary(fit_perm)
plot(feed, weight_perm, xlab='treat',col=rainbow(g),main='Permuted Data')
# CMC to estimate the p-value
B <- 1000 # Number of permutations
T_stat <- numeric(B)
n <- dim(chickwts)[1]
for(perm in 1:B){
# Permutation:
permutation <- sample(1:n)
weight_perm <- weight[permutation]
fit_perm <- aov(weight_perm ~ feed)
# Test statistic:
T_stat[perm] <- summary(fit_perm)[[1]][1,4]
}
layout(1)
hist(T_stat,xlim=range(c(T_stat,T0)),breaks=30)
abline(v=T0,col=3,lwd=2)
p_val <- sum(T_stat>=T0)/B
p_val
# we reject the null hypothesis
detach(chickwts)
data(iris)
attach(iris)
species.name <- factor(Species, labels=c('setosa','versicolor','virginica'))
iris4        <- iris[,1:4]
plot(iris4,col=species.name)
i1 <- which(species.name=='setosa')
i2 <- which(species.name=='versicolor')
i3 <- which(species.name=='virginica')
n1 <- length(i1)
n2 <- length(i2)
n3 <- length(i3)
n  <- n1+n2+n3
g  <- length(levels(species.name))
p  <- 4
detach(iris)
# MANOVA
# parametric test:
fit <- manova(as.matrix(iris4) ~ species.name)
summary.manova(fit,test="Wilks")
# How to perform a permutation test in this case?
# Multivariate framework -> We permute the labels associated to each unit
permutation <- sample(1:n)
species.name.perm <- species.name[permutation]
plot(iris4,col=species.name.perm)
setwd('/Users/simone/Documents/Università/Didattica e divulgazione/Numerical and Statistical Methods for Geosciences/2018-19/Permutation Test - Euclidean')
###################################################################################
# Linear models
# Example on simulated data
set.seed(05091985)
n <- 50
# covariate values
x1 <- runif(n,0,10)
x2 <- (1:n)/5
x3 <- rnorm(n,5,5)
# generating model
b0 <- 2
b1 <- 4
b2 <- -2
b3 <- 0
Y <- b0 + b1*x1 + b2*x2 + b3*x3 + runif(n,0,10)
plot(x1,Y,pch=16)
plot(x2,Y,pch=16)
plot(x3,Y,pch=16)
# parametric inference
result <- lm(Y ~ x1 + x2 + x3)
summary(result)
qqnorm(result$residuals)
shapiro.test(result$residuals)
# permutation inference
# we want to perform different tests
# Overall model
# H0: beta1 = beta2 = beta3 = 0
# test statistic
T0_glob <- summary(result)$f[1]
T0_glob
# permutations
permutazione <- sample(n)
Y.perm.glob <- Y[permutazione]
layout(matrix(1:6,nrow=3,byrow=FALSE))
plot(x1,Y,main='Y vs x1 (original data)',pch=16)
plot(x2,Y,main='Y vs x2 (original data)',pch=16)
plot(x3,Y,main='Y vs x3 (original data)',pch=16)
plot(x1,Y.perm.glob,main='Y vs x1 (permuted data)',pch=16)
plot(x2,Y.perm.glob,main='Y vs x2 (permuted data)',pch=16)
plot(x3,Y.perm.glob,main='Y vs x3 (permuted data)',pch=16)
# Test on variable x1
# H0: beta1 = 0
# test statistic
summary(result)$coefficients
T0_x1 <- abs(summary(result)$coefficients[2,3])
T0_x1
# permutations
# residuals of the reduced model
# reduced model:
# Y = beta0 + beta2*x2 + beta3*x3
regr.H01 <- lm(Y ~ x2 + x3)
residui.H01 <- regr.H01$residuals
residui.H01.perm <- residui.H01[permutazione]
Y.perm.H01 <- regr.H01$fitted + residui.H01.perm
layout(matrix(1:6,nrow=3,byrow=FALSE))
plot(x1,Y,main='Y vs x1 (original data)',pch=16)
plot(x2,Y,main='Y vs x2 (original data)',pch=16)
plot(x3,Y,main='Y vs x3 (original data)',pch=16)
plot(x1,Y.perm.H01,main='Y vs x1 (permuted data)',pch=16)
plot(x2,Y.perm.H01,main='Y vs x2 (permuted data)',pch=16)
plot(x3,Y.perm.H01,main='Y vs x3 (permuted data)',pch=16)
summary(result)$coefficients
T0_x2 <- abs(summary(result)$coefficients[3,3])
T0_x2
# permutations
# residuals of the reduced model
# reduced model:
# Y = beta0 + beta1*x1 + beta3*x3
regr.H02 <- lm(Y ~ x1 + x3)
residui.H02 <- regr.H02$residuals
residui.H02.perm <- residui.H02[permutazione]
# permuted y:
Y.perm.H02 <- regr.H02$fitted + residui.H02.perm
X11()
layout(matrix(1:6,nrow=3,byrow=FALSE))
plot(x1,Y,main='Y vs x1 (original data)',pch=16)
plot(x2,Y,main='Y vs x2 (original data)',pch=16)
plot(x3,Y,main='Y vs x3 (original data)',pch=16)
plot(x1,Y.perm.H02,main='Y vs x1 (permuted data)',pch=16)
plot(x2,Y.perm.H02,main='Y vs x2 (permuted data)',pch=16)
plot(x3,Y.perm.H02,main='Y vs x3 (permuted data)',pch=16)
summary(result)$coefficients
T0_x3 <- abs(summary(result)$coefficients[4,3])
T0_x3
# permutations
# residuals of the reduced model
# reduced model:
# Y = beta0 + beta1*x1 + beta2*x2
regr.H03 <- lm(Y ~ x1 + x2)
residui.H03 <- regr.H03$residuals
residui.H03.perm <- residui.H03[permutazione]
# permuted y:
Y.perm.H03 <- regr.H03$fitted + residui.H03.perm
layout(matrix(1:6,nrow=3,byrow=FALSE))
plot(x1,Y,main='Y vs x1 (original data)',pch=16)
plot(x2,Y,main='Y vs x2 (original data)',pch=16)
plot(x3,Y,main='Y vs x3 (original data)',pch=16)
plot(x1,Y.perm.H03,main='Y vs x1 (permuted data)',pch=16)
plot(x2,Y.perm.H03,main='Y vs x2 (permuted data)',pch=16)
plot(x3,Y.perm.H03,main='Y vs x3 (permuted data)',pch=16)
B <- 1000
T_H0glob <- T_H01 <- T_H02 <- T_H03 <- numeric(B)
for(perm in 1:B){
permutazione <- sample(n)
Y.perm.glob <- Y[permutazione]
T_H0glob[perm] <- summary(lm(Y.perm.glob ~ x1 + x2 + x3))$f[1]
residui.H01.perm <- residui.H01[permutazione]
Y.perm.H01 <- regr.H01$fitted + residui.H01.perm
T_H01[perm] <- abs(summary(lm(Y.perm.H01 ~ x1 + x2 + x3))$coefficients[2,3])
residui.H02.perm <- residui.H02[permutazione]
Y.perm.H02 <- regr.H02$fitted + residui.H02.perm
T_H02[perm] <- abs(summary(lm(Y.perm.H02 ~ x1 + x2 + x3))$coefficients[3,3])
residui.H03.perm <- residui.H03[permutazione]
Y.perm.H03 <- regr.H03$fitted + residui.H03.perm
T_H03[perm] <- abs(summary(lm(Y.perm.H03 ~ x1 + x2 + x3))$coefficients[4,3])
}
sum(T_H0glob>=T0_glob)/B
sum(T_H01>=T0_x1)/B
sum(T_H02>=T0_x2)/B
sum(T_H03>=T0_x3)/B
summary(result)
