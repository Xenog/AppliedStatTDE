we = numeric(28*24),
hour =numeric(28*24))
for (i in 2:length(df[1,])){
for (j in 1:length(df[,1])){
print(i)
print(df[j,i])
d$cons[count] <- df[j,i]
count = count + 1
}
}
for (i in 2:(length(df[1,])-1)){
for (j in 1:length(df[,1])){
print(i)
print(df[j,i])
d$cons[count] <- df[j,i]
count = count + 1
}
}
View(d)
for (i in 2:(length(df[1,])-1)){
for (j in 1:length(df[,1])){
print(i)
print(df[j,i])
d$cons[count] <- df[j,i]
d$we[count] <- df[j,1]
count = count + 1
}
}
for (i in 2:(length(df[1,])-1)){
for (j in 1:length(df[,1])){
print(i)
print(df[j,i])
d$cons[count] <- df[j,i]
d$we[count] <- df[1,i]
count = count + 1
}
}
d$we[count] <- df[j,1]
d$we[count] <- df[2,1]
df[2,1]
for (i in 2:(length(df[1,])-1)){
for (j in 1:length(df[,1])){
print(i)
print(df[j,i])
d$cons[count] <- df[j,i]
d$we[count] <- df[j,1]
d$hour[count] <- i-1
count = count + 1
}
}
d <- data.frame(cons=numeric(28*24),
we = numeric(28*24),
hour =numeric(28*24))
count = 1
for (i in 2:(length(df[1,])-1)){
for (j in 1:length(df[,1])){
print(i)
print(df[j,i])
d$cons[count] <- df[j,i]
d$we[count] <- df[j,1]
d$hour[count] <- i-1
count = count + 1
}
}
d <- data.frame(cons=numeric(28*24),
we = numeric(28*24),
hour =numeric(28*24))
count = 1
for (i in 2:(length(df[1,])-1)){
for (j in 1:length(df[,1])){
print(i)
print(df[j,i])
d$cons[count] <- df[j,i]
d$we[count] <- df[j,26]
d$hour[count] <- i-1
count = count + 1
}
}
fit <- lm(cons ~ hour + we )
fit <- lm(cons ~ hour + we, data= d )
summary(fit)
fit <- lm(cons ~ we + we:(1-cos(hour:2*pi/24)), data= d )
summary(fit)
fit <- lm(cons ~ we + we:(1-cos(hour:2*pi/24)), data= d )
summary(fit)
d$t <- 1-cos(d$hour*2*pi/24)
fit <- lm(cons ~ we + we:t, data= d )
summary(fit)
d$we <- as.factor(d$we)
fit <- lm(cons ~ we + we:t, data= d )
summary(fit)
fit1 <- lm(cons ~  we:t, data= d )
summary(fit1)
confint(fit2, level= 1-0.05)[2:3,]
confint(fit1, level= 1-0.05)[2:3,]
confint(fit1, level= 1-0.05)[0,]
confint(fit1, level= 1-0.05)[1,]
confint(fit1, level= 1-0.05)[1:3,]
Conf <- predict(fit1, Z0.new, interval='confidence', level=1-0.05)
Conf
Z0.new <- data.frame(we=0, hour = 12)
Conf <- predict(fit1, Z0.new, interval='confidence', level=1-0.05)
Z0.new <- data.frame(we= levels(d)[1], hour = 12)
Z0.new
levels(d)[1]
levels(d)
Z0.new <- data.frame(we= levels(d$we)[1], t = 12)
Conf <- predict(fit1, Z0.new, interval='confidence', level=1-0.05)
Conf
Conf <- predict(fit1, Z0.new, interval='confidence', level = 1 - 0.1/(2*k))
Conf
Z1.new <- data.frame(we= levels(d$we)[1], t = 18)
Conf1 <- predict(fit1, Z1.new, interval='confidence', level = 1 - 0.1/(2*k))
Conf1
k = 4
Conf <- predict(fit1, Z0.new, interval='confidence', level = 1 - 0.1/(2*k))
Conf
Z1.new <- data.frame(we= levels(d$we)[1], t = 18)
Conf1 <- predict(fit1, Z1.new, interval='confidence', level = 1 - 0.1/(2*k))
Conf1
confint(fit1, level= 1-0.05/p)[4,]
confint(fit1, level= 1-0.05/(2*k))[4,]
confint(fit1, level= 1-0.05/(2*k))[3,]
?confint
coefficients(fit1)
vcov(fit1)
fit1$residuals
var(residuals)
var(fit1$residuals)
fit1$rank
sigma   <- sd(mod2$residuals)
sigma   <- sd(fit1$residuals)
var1 <- var(fit1$residuals)
?predict
Conf1 <- predict(fit1, Z1.new, interval='confidence')
Conf1
Conf1 <- predict(fit1, Z1.new, interval='confidence',alpha = 1 - 0.05)
Conf1
Conf <- predict(fit1, Z0.new, interval='confidence', level = 1 - 0.1/k)
Conf
Z1.new <- data.frame(we= levels(d$we)[1], t = 18)
Conf1 <- predict(fit1, Z1.new, interval='confidence',alpha = 1 - 0.1/k)
Conf1
var1 <- var(fit1$residuals)
CI_var <- c((n-1)*var1/qchisq(1-alpha/(2*k)))
CI_var <- c((n-1)*var1/qchisq(1-alpha/(2*k),n-1),(n-1)*var1/qchisq(1-alpha/(2*k),n-1))
n <- length(fit1$residuals)
CI_var <- c((n-1)*var1/qchisq(1-alpha/(2*k),n-1),(n-1)*var1/qchisq(1-alpha/(2*k),n-1))
pha = 0.1
pha = 0.1
n <- length(fit1$residuals)
alpha = 0.1
CI_var <- c((n-1)*var1/qchisq(1-alpha/(2*k),n-1),(n-1)*var1/qchisq(1-alpha/(2*k),n-1))
CI_var
var1
CI_var <- c((n-1)*var1/qchisq(1-alpha/(2*k),n-1),(n-1)*var1/qchisq(alpha/(2*k),n-1))
CI_var
setwd("C:/Users/ffede/OneDrive/Desktop/AppliedStatTDE/Old exams (in English)/120919")
eu <- dist(df, method='euclidean')
ward <- hclust(eu, method='ward.D')
df <- read.table("sequoia.txt")
eu <- dist(df, method='euclidean')
ward <- hclust(eu, method='ward.D')
eu <- dist(df, method='euclidean')
ward <- hclust(eu, method='ward.D')
plot(ward, labels = F, sub = "")
tree <- cutree(ward, k = 4)
plot(geisha, col = tree_single)
plot(df, col = tree)
tree <- cutree(ward, k = 5)
plot(df, col = tree)
plot(ward, labels = F, sub = "")
eu <- dist(df, method='euclidean')
ward <- hclust(eu, method='single')
plot(ward, labels = F, sub = "")
tree <- cutree(ward, k = 5)
plot(df, col = tree)
eu <- dist(df, method='euclidean')
ward <- hclust(eu, method='mcquitty')
plot(ward, labels = F, sub = "")
tree <- cutree(ward, k = 5)
plot(df, col = tree)
ward <- hclust(eu, method='Ward.D2')
ward <- hclust(eu, method='Ward.2')
ward <- hclust(eu, method='Ward.D')
ward <- hclust(eu, method='ward.D')
ward <- hclust(eu, method='ward.D2')
plot(ward, labels = F, sub = "")
tree <- cutree(ward, k = 5)
plot(df, col = tree)
eu <- dist(df, method='gower')
eu <- dist(df, method='canberra')
ward <- hclust(eu, method='ward.D')
plot(ward, labels = F, sub = "")
tree <- cutree(ward, k = 5)
plot(df, col = tree)
eu <- dist(df, method='euclidian')
ward <- hclust(eu, method='ward.D')
plot(ward, labels = F, sub = "")
tree <- cutree(ward, k = 5)
plot(df, col = tree)
group = c()
for (i in 1:5){
group[i] <- which(tree == i)
}
i1<-which(tree==1)
for (i in 1:5){
nam <- paste("group", i, sep = "")
assign(nam, which(tree==i))
#group[i] <- which(tree == i)
}
for (i in 1:5){
name <- paste("group", i, sep = "")
assign(name, which(tree==i))
}
for (i in 1:5){
#nam <- paste("group", i, sep = "")
#assign(nam, which(tree==i))
group[i] <- which(tree == i)
}
group = c(c())
for (i in 1:5){
#nam <- paste("group", i, sep = "")
#assign(nam, which(tree==i))
group[i] <- which(tree == i)
}
size(nam)
for (i in 1:5){
nam <- paste("group", i, sep = "")
assign(nam, which(tree==i))
length(nam)
#group[i] <- which(tree == i)
}
for (i in 1:5){
nam <- paste("group", i, sep = "")
assign(nam, which(tree==i))
print(length(nam))
#group[i] <- which(tree == i)
}
A <- lapply (1 : 5, function (x) which(tree==x))
View(A)
df <- read.table("sequoia.txt")
means <- lapply(groups,mean)
groups <- lapply (1 : 5, function (x) which(tree==x))
means <- lapply(groups,mean)
View(means)
num <- lapply(group,length)
View(num)
num <- lapply(groups,length)
View(num)
View(groups)
pvalues <- lapply(groups, mcshapiro.test)
load("C:/Users/ffede/OneDrive/Desktop/AppliedStatTDE/Old exams (in English)/140917/mcshapiro.test.RData")
pvalues <- lapply(groups, mcshapiro.test)
pvalues <- lapply(groups, mcshapiro.test)
pvalues <- lapply(groups, mean)
lapply(groups, mcshapiro.test)
for (i in length(groups)){
mschapiro.test(df[groups[i]])
}
mcshapiro.test(df[groups[i]])
for (i in length(groups)){
mcshapiro.test(df[groups[i]])
}
df[groups[i]]
df[groups[i],]
which(tree == 1)
typeof(which(tree==1))
for (i in length(groups)){
mcshapiro.test(df[unlist(groups[i])])
}
for (i in length(groups)){
mcshapiro.test(df[unlist(groups[i]),])
}
pvalues <- rep(NA,5)
pvalues <- rep(NA,length(groups))
for (i in length(groups)){
pvalues[i] <- mcshapiro.test(df[unlist(groups[i]),])
}
mcshapiro.test(df[unlist(groups[i]),])
for (i in length(groups)){
pvalues[i] <- mcshapiro.test(df[unlist(groups[i]),])$pvalue
}
pvalues
for (i in 1:length(groups)){
pvalues[i] <- mcshapiro.test(df[unlist(groups[i]),])$pvalue
}
pvalues
for (i in 1:length(groups)){
pvalues[i] <- shapiro.test(df[unlist(groups[i]),2])$pvalue
}
pvalues
for (i in 1:length(groups)){
pvalues[i] <- shapiro.test(df[unlist(groups[i]),2])$p
}
pvalues
IC.mean <- rep(c(),k/2)
k <- 10
alpha <- .1
IC.mean <- rep(c(),k/2)
IC.mean[i] <- c(m - qt(1-alpha/(2*k), n-1)* sqrt(s/n), m + qt(1-alpha/(2*k), n-1)* sqrt(s/n))
IC.mean <- rep(c(0,0),k/2)
IC.var <- rep(c(0,0),k/2)
for (i in 1:k/2){
x <- df[unlist(groups[i]),2]
n <- length(x)
m <- mean(x)
s <- var(x)
IC.mean[i] <- c(m - qt(1-alpha/(2*k), n-1)* sqrt(s/n), m + qt(1-alpha/(2*k), n-1)* sqrt(s/n))
IC.var[i] <- c(s * (n-1) / qchisq(alpha/(2*k), n-1), S* (n-1) /qchisq(1 - alpha/(2*k), n-1))
}
for (i in 1:k/2){
x <- df[unlist(groups[i]),2]
n <- length(x)
m <- mean(x)
s <- var(x)
IC.mean[i] <- c(m - qt(1-alpha/(2*k), n-1)* sqrt(s/n), m + qt(1-alpha/(2*k), n-1)* sqrt(s/n))
IC.var[i] <- c(s * (n-1) / qchisq(alpha/(2*k), n-1), s * (n-1) /qchisq(1 - alpha/(2*k), n-1))
}
IC.mean <- rep(c(),k/2)
IC.var <- rep(c(),k/2)
for (i in 1:k/2){
x <- df[unlist(groups[i]),2]
n <- length(x)
m <- mean(x)
s <- var(x)
IC.mean[i] <- c(m - qt(1-alpha/(2*k), n-1)* sqrt(s/n), m + qt(1-alpha/(2*k), n-1)* sqrt(s/n))
IC.var[i] <- c(s * (n-1) / qchisq(alpha/(2*k), n-1), s * (n-1) /qchisq(1 - alpha/(2*k), n-1))
}
IC.mean
IC.var <- matrix (rep (NA,2), nrow = k/2)
for (i in 1:k/2){
x <- df[unlist(groups[i]),2]
n <- length(x)
m <- mean(x)
s <- var(x)
IC.mean[i] <- c(m - qt(1-alpha/(2*k), n-1)* sqrt(s/n), m + qt(1-alpha/(2*k), n-1)* sqrt(s/n))
IC.var[i] <- c(s * (n-1) / qchisq(alpha/(2*k), n-1), s * (n-1) /qchisq(1 - alpha/(2*k), n-1))
}
IC.var
IC.var <- matrix (rep (NA,1), nrow = k/2)
for (i in 1:k/2){
x <- df[unlist(groups[i]),2]
n <- length(x)
m <- mean(x)
s <- var(x)
IC.mean[i] <- c(m - qt(1-alpha/(2*k), n-1)* sqrt(s/n), m + qt(1-alpha/(2*k), n-1)* sqrt(s/n))
IC.var[i] <- c(s * (n-1) / qchisq(alpha/(2*k), n-1), s * (n-1) /qchisq(1 - alpha/(2*k), n-1))
}
IC.var
IC.var <- matrix (rep (NA,2), nrow = k/2)
IC.var <- matrix (rep (NA,2), nrow = k/2)
IC.var <- matrix (rep (NA,2), nrow = k/2)
IC.var <- matrix (rep (NA,2), nrow = k/2)
for (i in 1:k/2){
x <- df[unlist(groups[i]),2]
n <- length(x)
m <- mean(x)
s <- var(x)
IC.mean[i,1] <- m - qt(1-alpha/(2*k), n-1)* sqrt(s/n)
IC.mean[i,2] <-  m + qt(1-alpha/(2*k), n-1)* sqrt(s/n)
IC.var[i,1] <- s * (n-1) / qchisq(alpha/(2*k), n-1)
IC.var[i,2] <- s * (n-1) / qchisq(1-alpha/(2*k), n-1)
}
IC.var
IC.var <- matrix (rep (0,2), nrow = k/2)
View(IC.var)
IC.var <- matrix (rep (0,10), nrow = k/2)
IC.var <- matrix (rep (0,k), nrow = k/2)
IC.var <- matrix (rep (0,k), nrow = k/2)
for (i in 1:k/2){
x <- df[unlist(groups[i]),2]
n <- length(x)
m <- mean(x)
s <- var(x)
IC.mean[i,1] <- m - qt(1-alpha/(2*k), n-1)* sqrt(s/n)
IC.mean[i,2] <-  m + qt(1-alpha/(2*k), n-1)* sqrt(s/n)
IC.var[i,1] <- s * (n-1) / qchisq(alpha/(2*k), n-1)
IC.var[i,2] <- s * (n-1) / qchisq(1-alpha/(2*k), n-1)
}
IC.mean
IC.var
IC.mean <- matrix (rep (0,k), nrow = k/2)
IC.var <- matrix (rep (0,k), nrow = k/2)
for (i in 1:k/2){
x <- df[unlist(groups[i]),2]
n <- length(x)
m <- mean(x)
s <- var(x)
IC.mean[i,1] <- m - qt(1-alpha/(2*k), n-1)* sqrt(s/n)
IC.mean[i,2] <-  m + qt(1-alpha/(2*k), n-1)* sqrt(s/n)
IC.var[i,1] <- s * (n-1) / qchisq(alpha/(2*k), n-1)
IC.var[i,2] <- s * (n-1) / qchisq(1-alpha/(2*k), n-1)
}
IC.mean
IC.var
IC.mean <- matrix (rep (0,k), nrow = k/2)
IC.var <- matrix (rep (0,k), nrow = k/2)
for (i in 1:k/2){
x <- df[unlist(groups[i]),2]
n <- length(x)
m <- mean(x)
s <- var(x)
IC.mean[i,1] <- m - qt(1-alpha/(2*k), n-1)* sqrt(s/n)
IC.mean[i,2] <-  m + qt(1-alpha/(2*k), n-1)* sqrt(s/n)
IC.var[i,1] <- s * (n-1) / qchisq(1-alpha/(2*k), n-1)
IC.var[i,2] <- s * (n-1) / qchisq(alpha/(2*k), n-1)
}
IC.mean
IC.var
df <- read.table('profiling.txt')
setwd("C:/Users/ffede/OneDrive/Desktop/AppliedStatTDE/Old exams (in English)/280619")
df <- read.table('profiling.txt')
mcshapiro.test(df[which(df$type=='tourist'),1:2])
mcshapiro.test(df[which(df$type=='resident'),1:2])
var(df[which(df$type=='tourist'),1:2])
var(df[which(df$type=='resident'),1:2])
qda.m <- qda(df[,1:2],df[,3])
library(MASS)
qda.m <- qda(df[,1:2],df[,3])
qda.m
qda.m$scaling
plot(df[,1:2], main='Plot', xlab='x1', ylab='x2', pch=20)
points(m$means, pch=4,col=c('red','blue') , lwd=2, cex=1.5)
points(qda.m$means, pch=4,col=c('red','blue') , lwd=2, cex=1.5)
x  <- seq(min(df[,1]), max(df[,1]), length=200)
y  <- seq(min(df[,2]), max(df[,2]), length=200)
xy <- expand.grid(t1=x, t2=y)
z  <- predict(m, xy)$post
z1 <- z[,1] - z[,2]
z  <- predict(qda.m, xy)$post
z1 <- z[,1] - z[,2]
z2 <- z[,2] - z[,1]
contour(x, y, matrix(z1, 200), levels=0, drawlabels=F, add=T)
contour(x, y, matrix(z2, 200), levels=0, drawlabels=F, add=T)
e'))
plot(df[,1:2], main='Plot', xlab='x1', ylab='x2', pch=20, col =c('red','blue'))
plot(df[,1:2],col=df[,3], main='Plot', xlab='x1', ylab='x2', pch=20)
points(qda.m$means, pch=4,col=c('red','blue') , lwd=2, cex=1.5)
plot(df[,1:2],col=df[,3], main='Plot', xlab='x1', ylab='x2', pch=20)
y  <- seq(min(df[,2]), max(df[,2]), length=200)
points(qda.m$means, pch=4,col=c('red','blue') , lwd=2, cex=1.5)
xy <- expand.grid(t1=x, t2=y)
x  <- seq(min(df[,1]), max(df[,1]), length=200)
z  <- predict(qda.m, xy)$post
contour(x, y, matrix(z1, 200), levels=0, drawlabels=F, add=T)
z2 <- z[,2] - z[,1]
z1 <- z[,1] - z[,2]
contour(x, y, matrix(z2, 200), levels=0, drawlabels=F, add=T)
mcv <- qda(df[,c(1,2)], df[,3], CV=T)
errorsqCV <- (mcv$class != df[,3])
AERqCV   <- sum(errorsqCV)/length(df[,3])
AERqCV
pred <- data.frame(t1 = 35, t2 = 3)
z  <- predict(mcv, pred)$post
z  <- predict(mcv, pred)
z  <- predict(qda.m, pred)
z
df <- read.table('airports.txt')
df <- read.table('airport.txt')
View(df)
fit <- lm(duration ~ time.of.the.day*distance, data = df )
summary(fit)
m = lm(duration ~ time.of.the.day + distance + distance:time.of.the.day)
summary(m)
attach(df)
m = lm(duration ~ time.of.the.day + distance + distance:time.of.the.day)
summary(m)
fit <- lm(duration ~ time.of.the.day*distance, data = df )
summary(fit)
shapiro.test(fit$residuals)
linearHypothesis(fit, rbind(c(1,0,0,0,0,0),c(0,1,0,0,0,0),c(0,0,1,0,0,0)), c(0,0,0))
library(car)
linearHypothesis(fit, rbind(c(1,0,0,0,0,0),c(0,1,0,0,0,0),c(0,0,1,0,0,0)), c(0,0,0))
linearHypothesis(m, rbind(c(0,0,0,1,0,0),c(0,0,0,0,1,0),c(0,0,0,0,0,1)), c(0,0,0))
linearHypothesis(fit, rbind(c(1,0,0,0,0,0),c(0,1,0,0,0,0),c(0,0,1,0,0,0),c(0,0,0,0,0,1),c(0,0,0,0,1,0)), c(0,0,0))
linearHypothesis(fit, rbind(c(1,0,0,0,0,0),c(0,1,0,0,0,0),c(0,0,1,0,0,0),c(0,0,0,0,0,1),c(0,0,0,0,1,0)), c(0,0,0,0,0))
vif(fit)
fit <- lm(duration ~ time.of.the.day:distance, data = df )
summary(fit)
fit <- lm(duration ~ time.of.the.day:distance + distance, data = df )
summary(fit)
fit <- lm(duration ~ time.of.the.day:distance, data = df )
summary(fit)
fit <- lm(duration ~ -1+time.of.the.day:distance, data = df )
summary(fit)
shapiro.test(fit$residuals)
# capire se si intercetta o no
fit <- lm(duration ~ -1 + time.of.the.day:distance, data = df )
summary(fit)
shapiro.test(fit$residuals)
pred <- data.frame(distance = 57, t2 = '16-20')
?predict.lm
z  <- predict(fit, pred, interval = 'confidence')
pred <- data.frame(distance = 57, t2 = '16-20')
z  <- predict(fit, pred, interval = 'confidence')
z  <- predict.lm(fit, pred, interval = 'confidence')
z  <- predict(fit, pred, interval = 'confidence')
pred <- data.frame(distance = 57, time.of.the.day = '16-20')
z  <- predict(fit, pred, interval = 'confidence')
z
z  <- predict(fit, pred, interval = 'confidence', level = 0.99)
z
z  <- predict(fit, pred, interval = 'prediction', level = 0.99)
z
pred <- data.frame(distance = 57, time.of.the.day = '6-10')
z  <- predict(fit, pred, interval = 'prediction', level = 0.99)
z
z  <- predict(fit, pred, interval = 'prediction', level = 0.99)
z
z  <- predict(fit, pred, interval = 'confidence', level = 0.99)
z
