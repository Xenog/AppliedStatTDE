#    t1       t2
# 46.44361 15.62778  mean for tourists
M.r <- colMeans(df[-fitted,1:2])
M.r
#   t1       t2
# 37.88309 15.08983  mean for residents
V <- var(df[fitted,1:2])
V.r <- var(df[-fitted,1:2])
V
V.r
mcshapiro.test(df[,1:2])
load('mcshapiro.test.RData')
mcshapiro.test(df[,1:2])
var.test(df[,1],df[,2])
rm(list = ls())
df <- read.table('airport.txt')
head(df)
mod1 <- lm(duration ~ distance + distance:time.of.the.day + time.of.the.day, data = df)
summary(mod1)
coefs <- coef(mod1)
coefs
shapiro.test(mod1$residuals)
par(mfrow = c(2,2))
plot(mod1)
vif(mod1)
vif(mod1)
library(car)
vif(mod1)
help("vif")
linearHypothesis(mod1, rbind(c(0,0,1,0,0,0),
c(0,0,0,1,0,0),
c(0,0,0,0,1,0),
c(0,0,0,0,0,1)), c(0,0,0,0))
linearHypothesis(mod1, rbind(c(0,1,0,0,0,0),
c(0,0,0,0,1,0),
c(0,0,0,0,0,1)), c(0,0,0))
linearHypothesis(mod1, rbind(c(0,1,0,0,0,0),
c(0,0,0,0,1,0),
c(0,0,0,0,0,1)), c(0,0,0)) # pvalue < 2.2e-16 anche la distanza
summary(mod1)
mod2 <- lm(duration ~ distance + distance:time.of.the.day, data = df)
summary(mod2)
mod3 <- lm(duration ~ distance, data = df)
summary(mod3)
mod2 <- lm(duration ~ distance + distance:time.of.the.day, data = df)
summary(mod2)
summary(mod1)
linearHypothesis(mod1, rbind(c(0,0,1,0,0,0),
c(0,0,0,1,0,0)), c(0,0))
vif(mod2)
par(mfrow = c(2,2))
plot(mod2) #ok
shapiro.test(mod2$residuals)
coefs <- coef(mod2)
head(df)
newdat <- data.frame(distance = 57, time.of.the.day = '6-10')
guess <- predict(mod2, newdat)
guess
guess <- predict(mod2, newdat, interval = 'confidence', level = 0.99)
guess
rm(list = ls())
df <- read.table('montserrat.txt')
head(df)
s0 = c(402476, 4605558) # top of the mountain
setwd("C:/Users/gianm/Desktop/TDEApplied/Labs/Extra-Geostatistics")
data(meuse)
## Define the sample coordinates
coordinates(meuse) <- c('x','y')
###--------------------###
###    GEOSTATISTICS   ###
###--------------------###
## Clear the workspace
rm(list=ls())
## Load spatial packages
#install.packages('geoR')
#install.packages('gstat')
library(sp)           ## Data management
library(lattice)      ## Data management
library(geoR)         ## Geostatistics
library(gstat)        ## Geostatistics
## Set working directory
setwd("D:/Documenti/Politecnico/Didattica/2020 Applied Statistics/Module Geostatistics/")
## Functions for graphics
v.f <- function(x, ...){100-cov.spatial(x, ...)}
v.f.est<-function(x,C0, ...){C0-cov.spatial(x, ...)}
##########################################################
data(meuse)
## Define the sample coordinates
coordinates(meuse) <- c('x','y')
# bubble plot(obj,zcol,...)
# key.space=location of the key
bubble(meuse,'zinc',do.log=TRUE,key.space='bottom')
dev.off()
# bubble plot(obj,zcol,...)
# key.space=location of the key
bubble(meuse,'zinc',do.log=TRUE,key.space='bottom')
meuse
setwd("C:/Users/gianm/Desktop/TDEApplied/Old exams (in English)/280619")
rm(list = ls())
df <- read.table('montserrat.txt')
head(df)
s0 = c(402476, 4605558) # top of the mountain
## Define the sample coordinates
coordinates(df) <- c('x','y')
# bubble plot(obj,zcol,...)
# key.space=location of the key
bubble(df,'speed',do.log=TRUE,key.space='bottom')
# bubble plot(obj,zcol,...)
# key.space=location of the key
bubble(df,'distance',do.log=TRUE,key.space='bottom')
# bubble plot(obj,zcol,...)
# key.space=location of the key
bubble(df,'speed',do.log=TRUE,key.space='bottom')
# bubble plot(obj,zcol,...)
# key.space=location of the key
bubble(df,'speed',do.log=FALSE,key.space='bottom')
# bubble plot(obj,zcol,...)
# key.space=location of the key
bubble(df,'speed',do.log=TRUE,key.space='bottom')
dev.off()
# river meuse
data(meuse.riv)
meuse.lst <- list(Polygons(list(Polygon(meuse.riv)), "meuse.riv"))
meuse.sr <- SpatialPolygons(meuse.lst)
# grid for prediction
data(meuse.grid)
is(meuse.grid)
coordinates(meuse.grid) <- c('x','y')
meuse.grid <- as(meuse.grid, 'SpatialPixelsDataFrame')
# plot all together
image(meuse.grid, col = "lightgrey")
plot(meuse.sr, col = "grey", add = TRUE)
plot(meuse, add = TRUE)
title('meuse river geostatistical data')
meuse.riv
meuse.grid
# grid for prediction
data(meuse.grid)
is(meuse.grid)
coordinates(meuse.grid) <- c('x','y')
meuse.grid <- as(meuse.grid, 'SpatialPixelsDataFrame')
# plot all together
image(meuse.grid, col = "lightgrey")
plot(meuse.sr, col = "grey", add = TRUE)
plot(meuse, add = TRUE)
title('meuse river geostatistical data')
# grid for prediction
data(meuse.grid)
is(meuse.grid)
coordinates(meuse.grid) <- c('x','y')
meuse.grid <- as(meuse.grid, 'SpatialPixelsDataFrame')
# plot all together
image(meuse.grid, col = "lightgrey")
plot(meuse.sr, col = "grey", add = TRUE)
plot(df, add = TRUE)
title('meuse river geostatistical data')
# grid for prediction
data(meuse.grid)
is(meuse.grid)
coordinates(meuse.grid) <- c('x','y')
meuse.grid <- as(meuse.grid, 'SpatialPixelsDataFrame')
# plot all together
image(meuse.grid, col = "lightgrey")
plot(meuse.sr, col = "grey", add = TRUE)
plot(df, add = TRUE)
title('meuse river geostatistical data')
# plot all together
#image(meuse.grid, col = "lightgrey")
plot(meuse.sr, col = "grey", add = TRUE)
plot(df, add = TRUE)
title('meuse river geostatistical data')
# bubble plot(obj,zcol,...)
# key.space=location of the key
bubble(df,'speed',do.log=TRUE,key.space='bottom')
dev.off()
head(df)
# scatterplot of speed with respect to distance from the river
xyplot(speed ~ distance, df)
rm(list = ls())
df <- read.table('montserrat.txt')
head(df)
s0 = c(402476, 4605558) # top of the mountain
## Define the sample coordinates
coordinates(df) <- c('x','y')
# bubble plot(obj,zcol,...)
# key.space=location of the key
bubble(df,'speed',do.log=TRUE,key.space='bottom')
dev.off()
# scatterplot of speed with respect to distance from the river
xyplot(speed ~ distance, df)
# Negative correlation: lower distance from the river => higher level of zinc
dev.off()
head(df)
df$speed
# scatterplot of speed with respect to distance from the river
xyplot(df$speed ~ df$distance)
# Negative correlation: lower distance from the top of the mountain => higher speed
dev.off()
# sample variogram (binned estimator)
svgm <- variogram(df$speed ~ 1)
plot(svgm, main = 'Sample Variogram',pch=19)
# sample variogram (binned estimator)
svgm <- variogram(speed ~ 1, data = df)
plot(svgm, main = 'Sample Variogram',pch=19)
dev.off()
# the following
plot(variogram(log(zinc) ~ 1, meuse),pch=19)
plot(variogram(speed ~ 1, df),pch=19)
setwd("C:/Users/gianm/Desktop/TDEApplied/Labs/Extra-Geostatistics")
# Data import
data=read.table('fluoruro.txt')
names(data)[3]='f'
attach(data)
coordinates(data)=c('X','Y')
head(data)
v=variogram(f ~ 1, data=data)
plot(v,pch=19)
v.t=variogram(f ~ D, data=data)
plot(v.t,pch=19)
# sample variogram (binned estimator)
svgm <- variogram(speed ~ 1, data = df)
plot(svgm, main = 'Sample Variogram',pch=19)
dev.off()
setwd("C:/Users/gianm/Desktop/TDEApplied/Old exams (in English)/280619")
rm(list = ls())
df <- read.table('montserrat.txt')
head(df)
s0 = c(402476, 4605558) # top of the mountain
## Define the sample coordinates
coordinates(df) <- c('x','y')
# bubble plot(obj,zcol,...)
# key.space=location of the key
bubble(df,'speed',do.log=TRUE,key.space='bottom')
dev.off()
# scatterplot of speed with respect to distance from the top of the mountain
xyplot(df$speed ~ df$distance)
# Negative correlation: lower distance from the top of the mountain => higher speed
dev.off()
# sample variogram (binned estimator)
svgm <- variogram(speed ~ 1, data = df)
plot(svgm, main = 'Sample Variogram',pch=19)
dev.off()
# scatterplot of speed with respect to distance from the top of the mountain
xyplot(df$speed ~ df$distance)
# Negative correlation: lower distance from the top of the mountain => higher speed
dev.off()
# sample variogram (binned estimator)
svgm <- variogram(speed ~ 1, data = df)
plot(svgm, main = 'Sample Variogram',pch=19)
head(df)
# sample variogram (binned estimator)
svgm2 <- variogram(speed ~ distance, data = df)
plot(svgm, main = 'Variogram 2',pch=19)
plot(svgm2, main = 'Variogram 2',pch=19)
par(mfrow = c(2,1))
svgm1 <- variogram(speed ~ 1, data = df)
plot(svgm, main = 'Variogram 1',pch=19)
dev.off()
# sample variogram (binned estimator)
svgm2 <- variogram(speed ~ distance, data = df)
plot(svgm2, main = 'Variogram 2',pch=19)
svgm1 <- variogram(speed ~ 1, data = df)
plot(svgm, main = 'Variogram 1',pch=19)
# sample variogram (binned estimator)
svgm2 <- variogram(speed ~ distance, data = df)
plot(svgm2, main = 'Variogram 2',pch=19)
par(mfrow = c(2,1))
svgm1 <- variogram(speed ~ 1, data = df)
plot(svgm, main = 'Variogram 1',pch=19)
# sample variogram (binned estimator)
svgm2 <- variogram(speed ~ distance, data = df)
plot(svgm2, main = 'Variogram 2',pch=19)
x11()
par(mfrow = c(2,1))
svgm1 <- variogram(speed ~ 1, data = df)
plot(svgm, main = 'Variogram 1',pch=19)
# sample variogram (binned estimator)
svgm2 <- variogram(speed ~ distance, data = df)
plot(svgm2, main = 'Variogram 2',pch=19)
x11()
par(mfrow = c(1,2))
svgm1 <- variogram(speed ~ 1, data = df)
plot(svgm, main = 'Variogram 1',pch=19)
# sample variogram (binned estimator)
svgm2 <- variogram(speed ~ distance, data = df)
plot(svgm2, main = 'Variogram 2',pch=19)
par(mfrow = c(1,2))
svgm1 <- variogram(speed ~ 1, data = df)
plot(svgm, main = 'Variogram 1',pch=19)
svgm2 <- variogram(speed ~ distance, data = df)
plot(svgm2, main = 'Variogram 2',pch=19)
x11()
par(mfrow = c(1,2))
svgm1 <- variogram(speed ~ 1, data = df)
plot(svgm, main = 'Variogram 1',pch=19)
svgm2 <- variogram(speed ~ distance, data = df)
plot(svgm2, main = 'Variogram 2',pch=19)
x11()
par(mfrow = c(1,2))
svgm1 <- variogram(speed ~ 1, data = df)
svgm2 <- variogram(speed ~ distance, data = df)
plot(svgm, main = 'Variogram 1',pch=19)
plot(svgm2, main = 'Variogram 2',pch=19)
par(mfrow = c(1,2))
svgm1 <- variogram(speed ~ 1, data = df)
svgm2 <- variogram(speed ~ distance, data = df)
plot(svgm, main = 'Variogram 1',pch=19)
plot(svgm2, main = 'Variogram 2',pch=19)
svgm1 <- variogram(speed ~ 1, data = df)
svgm2 <- variogram(speed ~ distance, data = df)
par(mfrow = c(1,2))
plot(svgm, main = 'Variogram 1',pch=19)
plot(svgm2, main = 'Variogram 2',pch=19)
par(mfrow = c(1,2))
plot(svgm, main = 'Variogram 1',pch=19)
plot(svgm2, main = 'Variogram 2',pch=19)
x11()
par(mfrow = c(1,2))
plot(svgm, main = 'Variogram 1',pch=19)
plot(svgm2, main = 'Variogram 2',pch=19)
x11()
par(mfrow = c(2,2))
plot(svgm, main = 'Variogram 1',pch=19)
plot(svgm2, main = 'Variogram 2',pch=19)
dev.off()
x11()
par(mfrow = c(2,2))
plot(svgm, main = 'Variogram 1',pch=19)
plot(svgm2, main = 'Variogram 2',pch=19)
rm(list = ls())
df <- read.table('montserrat.txt')
head(df)
s0 = c(402476, 4605558) # top of the mountain
## Define the sample coordinates
coordinates(df) <- c('x','y')
# bubble plot(obj,zcol,...)
# key.space=location of the key
bubble(df,'speed',do.log=TRUE,key.space='bottom')
dev.off()
# scatterplot of speed with respect to distance from the top of the mountain
xyplot(df$speed ~ df$distance)
# Negative correlation: lower distance from the top of the mountain => higher speed
dev.off()
svgm1 <- variogram(speed ~ 1, data = df)
svgm2 <- variogram(speed ~ distance, data = df)
par(mfrow = c(2,1))
plot(svgm, main = 'Variogram 1',pch=19)
plot(svgm2, main = 'Variogram 2',pch=19)
dev.off()
par(mfrow = c(2,1))
plot(svgm1, main = 'Variogram 1',pch=19)
plot(svgm2, main = 'Variogram 2',pch=19)
rm(list = ls())
df <- read.table('montserrat.txt')
head(df)
s0 = c(402476, 4605558) # top of the mountain
## Define the sample coordinates
coordinates(df) <- c('x','y')
# bubble plot(obj,zcol,...)
# key.space=location of the key
bubble(df,'speed',do.log=TRUE,key.space='bottom')
dev.off()
# scatterplot of speed with respect to distance from the top of the mountain
xyplot(df$speed ~ df$distance)
# Negative correlation: lower distance from the top of the mountain => higher speed
dev.off()
svgm1 <- variogram(speed ~ 1, data = df)
svgm2 <- variogram(speed ~ distance, data = df)
par(mfrow = c(2,1))
plot(svgm1, main = 'Variogram 1',pch=19)
plot(svgm2, main = 'Variogram 2',pch=19)
dev.off()
par(mfrow = c(2,1))
plot(svgm1, main = 'Variogram 1',pch=19)
plot(svgm2, main = 'Variogram 2',pch=19)
plot(svgm1, main = 'Variogram 1',pch=19)
plot(svgm2, main = 'Variogram 2',pch=19)
v.fit1 <- fit.variogram(svgm2, vgm(100, "Sph", 0.08))
plot(svgm2, v.fit1, pch = 3)
v.fit1
v.fit1 <- fit.variogram(svgm2, vgm(50, "Sph", 0.08))
plot(svgm2, v.fit1, pch = 3)
v.fit1
svgm2 <- variogram(speed ~ distance, data = df)
plot(svgm1, main = 'Variogram 1',pch=19)
plot(svgm2, main = 'Variogram 2',pch=19)
v.fit1 <- fit.variogram(svgm2, vgm(50, "Sph", 0.08))
plot(svgm2, v.fit1, pch = 3)
v.fit1
v.fit1 <- fit.variogram(svgm2, vgm(50, "Sph", 1))
plot(svgm2, v.fit1, pch = 3)
v.fit1
v.fit1 <- fit.variogram(svgm2, vgm(50, "Sph", 0.01))
plot(svgm2, v.fit1, pch = 3)
v.fit1
v.fit1 <- fit.variogram(svgm2, vgm(25, "Sph", 0.01))
plot(svgm2, v.fit1, pch = 3)
v.fit1
setwd("C:/Users/gianm/Desktop/TDEApplied/Labs/Extra-Geostatistics")
# Data import
data=read.table('fluoruro.txt')
names(data)[3]='f'
attach(data)
coordinates(data)=c('X','Y')
v=variogram(f ~ 1, data=data)
plot(v,pch=19)
v.t=variogram(f ~ D, data=data)
plot(v.t,pch=19)
# b) Fit to the empirical variogram at point (a), a Gaussian model
#    without nugget, via weighted least squares. Use as initial parameters:
#    sill=100, range=0.02. Report the estimates of sill and range.
v.fit2 <- fit.variogram(v.t, vgm(100, "Gau", 0.02))
plot(v.t, v.fit2, pch = 3)
v.fit2
# c) Fit to the empirical variogram chosen at point (a), a spherical model
#    without nugget, via weighted least squares. Report the estimates of sill
#    and range.
v.fit1 <- fit.variogram(v.t, vgm(100, "Sph", 0.08))
plot(v.t, v.fit1, pch = 3)
v.fit1
v.fit1 <- fit.variogram(svgm2, vgm(10, "Sph", 0.01))
plot(svgm2, v.fit1, pch = 3)
setwd("C:/Users/gianm/Desktop/TDEApplied/Old exams (in English)/280619")
rm(list = ls())
df <- read.table('montserrat.txt')
head(df)
s0 = c(402476, 4605558) # top of the mountain
## Define the sample coordinates
coordinates(df) <- c('x','y')
# bubble plot(obj,zcol,...)
# key.space=location of the key
bubble(df,'speed',do.log=TRUE,key.space='bottom')
dev.off()
# scatterplot of speed with respect to distance from the top of the mountain
xyplot(df$speed ~ df$distance)
# Negative correlation: lower distance from the top of the mountain => higher speed
dev.off()
svgm1 <- variogram(speed ~ 1, data = df)
svgm2 <- variogram(speed ~ distance, data = df)
plot(svgm1, main = 'Variogram 1',pch=19)
plot(svgm2, main = 'Variogram 2',pch=19)
dev.off()
v.fit1 <- fit.variogram(svgm2, vgm(10, "Sph", 0.01))
plot(svgm2, v.fit1, pch = 3)
v.fit1
v.fit1 <- fit.variogram(svgm2, vgm(1000, "Sph", 0.1))
plot(svgm2, v.fit1, pch = 3)
v.fit1
v.fit1 <- fit.variogram(svgm2, vgm(1, "Sph", 0.5))
plot(svgm2, v.fit1, pch = 3)
v.fit1 <- fit.variogram(svgm2, vgm(7.5, "Sph", 0.5))
plot(svgm2, v.fit1, pch = 3)
v.fit1 <- fit.variogram(svgm2, vgm(7.5, "Sph", 0.05))
plot(svgm2, v.fit1, pch = 3)
v.fit1 <- fit.variogram(svgm2, vgm(7.5, "Sph", 0.01))
plot(svgm2, v.fit1, pch = 3)
v.fit1 <- fit.variogram(svgm2, vgm(7.5, "Sph", 2))
plot(svgm2, v.fit1, pch = 3)
v.fit1 <- fit.variogram(svgm2, vgm(8, "Sph", 10))
plot(svgm2, v.fit1, pch = 3)
v.fit1
g.tr <- gstat(formula = speed ~ distance, data = df, model = v.fit1)
g.tr
g.tr$
g.tr$
g.tr$data
g.tr$data
summary(g.tr)
g.tr$call
newdat <- data.frame(coordinates = s0, distance = 0)
predict(g.tr, newdat, BLUE = TRUE)
predict(g.tr, newdat, BLUE = TRUE)
newdat
newdat <- data.frame(x = s0[1], y = s0[2], distance = 0)
coordinates(df) <- x('x','y')
predict(g.tr, newdat, BLUE = TRUE)
newdat <- data.frame(x = s0[1], y = s0[2], distance = 0)
coordinates(df) <- x('x','y')
bewdat
nnewdat
coordinates(newdat) <- c('x','y')
newdat
coordinates(newdat) <- c('x','y')
predict(g.tr, newdat, BLUE = TRUE)
guess <- predict(g.tr, newdat, BLUE = TRUE)
guess$var1.pred
guess$var1.var
v.fit1$model
svgm2$np
svgm2$dir.hor
summary(svgm2)
summary(v.fit1)
svgm1 <- variogram(speed ~ 1, data = df)
svgm2 <- variogram(speed ~ distance, data = df)
plot(svgm1, main = 'Variogram 1',pch=19)
plot(svgm2, main = 'Variogram 2',pch=19)
plot(svgm1, main = 'Variogram 1',pch=19)
svgm1 <- variogram(speed ~ 1, data = df)
svgm2 <- variogram(speed ~ distance, data = df)
svgm1
svgm2 <- variogram(speed ~ distance, data = df)
plot(svgm1, main = 'Variogram 1',pch=19)
plot(svgm2, main = 'Variogram 2',pch=19)
dev.off()
v.fit1 <- fit.variogram(svgm2, vgm(8, "Sph", 10))
plot(svgm2, v.fit1, pch = 3)
setwd("C:/Users/gianm/Desktop/TDEApplied/Labs/Extra-Geostatistics")
data <- read.table('radioville.txt',header=TRUE)
attach(data)
head(data)
data <- read.table('radioville.txt',header=TRUE)
attach(data)
