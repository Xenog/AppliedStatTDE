fit2 <- lm(distance ~ wind:I(Vi^2) + wind:I(Va^2), data = df)
summary(fit2)
linearHypothesis(fit2,c(0,1,0,-1,0),0)
linearHypothesis(fit2,c(0,0,1,0,-1),0)
fit3 <- lm(distance ~ wind:I(Vi^2-Va^2),data = df)
summary(df)
summary(fit3)
k = 2
newZ0 <- data.frame(Vi = 25, Va = 35, wind = "upwind")
newZ1 <- data.frame(Vi = 25, Va = 35, wind = "downwind")
predict(fit3, newZ0, interval = 'prediction', level = 1-alpha/(2*k))
alpha = 0.01
predict(fit3, newZ0, interval = 'prediction', level = 1-alpha/(2*k))
predict(fit3, newZ1, interval = 'prediction', level = 1-alpha/(2*k))
predict(fit3, newZ0, interval = 'prediction', level = 1-alpha)
predict(fit2, newZ0, interval = 'prediction', level = 1-alpha/(2*k))
predict(fit2, newZ1, interval = 'prediction', level = 1-alpha/(2*k))
predict(fit, newZ0, interval = 'prediction', level = 1-alpha/(2*k))
predict(fit, newZ1, interval = 'prediction', level = 1-alpha/(2*k))
3
3
predict(fit3, newZ0, interval = 'prediction', level = 1-alpha/(2*k))
predict(fit3, newZ1, interval = 'prediction', level = 1-alpha/(2*k))
mod3 <- lm(distance ~ wind + I(Va^2-Vi^2), data = df)
summary(mod3)
setwd("C:/Users/ffede/OneDrive/Desktop/AppliedStatTDE/Old exams (in English)/190719")
df <- read.table("pines.txt")
center <- c(14.235,42.452)
mcshapiro.test(df)
load("C:/Users/ffede/OneDrive/Desktop/AppliedStatTDE/Old exams (in English)/180717/mcshapiro.test.RData")
mcshapiro.test(df)
mcshapiro.test(df)
mcshapiro.test(df)
n <- dim(df)[1]
p <- dim(df)[2]
alpha <- 0.01
x.mean   <- colMeans(df)
x.cov    <- cov(df)
x.invcov <- solve(x.cov)
x.T2 <- n * (x.mean-Aosta) %*% x.invcov %*% (x.mean-Aosta)
x.T2 <- n * (x.mean-center) %*% x.invcov %*% (x.mean-center)
cfr.fisher <- ((n-1)*p/(n-p))*qf(1-alpha,p,n-p)
x.T2 < cfr.fisher
P <- 1-pf(x.T2*(n-p)/((n-1)*p), p, n-p)
P
eigen(x.cov)$vectors
# Length of the semi-axes of the ellipse:
cfr.chisq <- qchisq(1-alpha,p)
r <- sqrt(cfr.chisq)
r*sqrt(eigen(x.cov)$values)
plot(df, xlim = c(14,15), ylim = c(42,43))
ellipse(center, shape=x.cov, sqrt(cfr.chisq), col = 'blue', lty = 2, center.pch = 4, center.cex=1.5, lwd=2)
points(center[1], center[2], pch = 4, cex = 1.5, lwd = 2, col ='blue')
plot(df, xlim = c(14.2,14.3), ylim = c(42.4,42.5))
ellipse(center, shape=x.cov, sqrt(cfr.chisq), col = 'blue', lty = 2, center.pch = 4, center.cex=1.5, lwd=2)
ellipse(x.mean, shape=x.cov, sqrt(cfr.chisq), col = 'blue', lty = 2, center.pch = 4, center.cex=1.5, lwd=2)
x.mean
center
df <- read.data('buoys.txt')
df <- read.table('buoys.txt')
View(df)
eu <- dist(df, method='euclidean')
ward <- hclust(eu, method='ward.D2')
eu <- dist(df[,1:2], method='euclidean')
ward <- hclust(eu, method='ward.D2')
plot(ward, labels = F, sub = "")
tree <- cutree(ward, k = 5)
tree <- cutree(ward, k = 4)
plot(df, col = tree)
plot(df[,1:2], col = tree)
tree <- cutree(ward, k = 3)
plot(df[,1:2], col = tree)
ward <- hclust(eu, method='ward.D')
plot(ward, labels = F, sub = "")
tree <- cutree(ward, k = 3)
plot(df[,1:2], col = tree)
ward <- hclust(eu, method='single')
plot(ward, labels = F, sub = "")
tree <- cutree(ward, k = 3)
plot(df[,1:2], col = tree)
ward <- hclust(eu, method='complete')
plot(ward, labels = F, sub = "")
tree <- cutree(ward, k = 3)
plot(df[,1:2], col = tree)
tree <- cutree(ward, k = 3)
plot(df[,1:2], col = tree)
ward <- hclust(eu, method='ward.D2')
plot(ward, labels = F, sub = "")
tree <- cutree(ward, k = 6)
plot(df[,1:2], col = tree)
tree <- cutree(ward, k = 3)
plot(df[,1:2], col = tree)
i1 <- which(tree == 1)
i2 <- which(tree == 2)
i3 <- which(tree == 3)
length(rbind(i1,i2,i3))
length(cbind(i1,i2,i3))
length(cbind(c(i1,i2,i3)))
cbind(c(i1,i2,i3))
length(i1)
length(i2)
length(i3)
colMeans(df[i1,])
colMeans(df[i2,])
colMeans(df[i3,])
ward <- hclust(eu, method='ward')
shapiro.test(df[i1,])
shapiro.test(df[i1,3])
shapiro.test(df[i2,3])
shapiro.test(df[i3,3])
bartlett.test(df$DO, tree)
anova <- aov(DO ~ tree, data = df)
summary(anova)
anova <- aov(x ~ tree, data = df)
anova <- aov(Long ~ tree, data = df)
summary(anova)
anova <- aov(Lat ~ tree, data = df)
summary(anova)
anova <- aov(DO ~ tree, data = df)
summary(anova)
colMeans(df)
colMeans(df[i1,])
colMeans(df[i2,])
colMeans(df[i3,])
df <- read.table('piadeina.txt')
df <- read.table('piadeina.txt')
View(df)
View(df)
fit <- lm(Sales ~ ., data = df)
summary(fit)
plot(fit)
vif(fit)
shapiro.test(fit$residuals)
corrplot(cor(df[,-1]))
library(corrplot)
corrplot(cor(df[,-1]))
fit <- lm(Sales ~ ., data = df)
summary(fit)
library(glmnet)
x <- model.matrix(Sales ~ .)[,-1]
x <- model.matrix(Sales ~ ., data = df)[,-1]
y <- Sales
# b
attach(df)
y <- Sales
library(glmnet)
fit.lasso <- glmnet(x,y, lambda = 5)
summary(fit.lasso)
fit.lasso$beta
bestlam.lasso <- cv.lasso$lambda.min
lambda.grid <- 0:100
cv.lasso <- cv.glmnet(x,y, lambda = lambda.grid)
bestlam.lasso <- cv.lasso$lambda.min
bestlam.lasso
plot(cv.lasso)
abline(v=log(bestlam.lasso), lty=1)
abline(v=bestlam.lasso, lty=1)
plot(cv.lasso)
abline(v=bestlam.lasso, lty=1)
cv.lasso <- cv.glmnet(x,y, lambda = lambda.grid)
bestlam.lasso <- cv.lasso$lambda.min
bestlam.lasso
plot(cv.lasso)
fit.lasso$beta
lambda.grid <- 0:10
cv.lasso <- cv.glmnet(x,y, lambda = lambda.grid)
bestlam.lasso <- cv.lasso$lambda.min
bestlam.lasso
plot(cv.lasso)
abline(v=bestlam.lasso, lty=1)
lambda.grid <- 0:100
cv.lasso <- cv.glmnet(x,y, lambda = lambda.grid)
bestlam.lasso <- cv.lasso$lambda.min
bestlam.lasso
plot(cv.lasso)
abline(v=bestlam.lasso, lty=1)
lambda.grid <- 0:100
cv.lasso <- cv.glmnet(x,y, lambda = lambda.grid)
bestlam.lasso <- cv.lasso$lambda.min
bestlam.lasso
plot(cv.lasso)
abline(v=bestlam.lasso, lty=1)
lambda.grid <- 0:100
cv.lasso <- cv.glmnet(x,y, lambda = lambda.grid)
bestlam.lasso <- cv.lasso$lambda.min
bestlam.lasso
plot(cv.lasso)
abline(v=bestlam.lasso, lty=1)
lambda.grid <- 0:100
cv.lasso <- cv.glmnet(x,y, lambda = lambda.grid)
bestlam.lasso <- cv.lasso$lambda.min
bestlam.lasso
plot(cv.lasso)
abline(v=log(bestlam.lasso), lty=1)
fit.lasso <- glmnet(x,y, lambda = 8)
fit.lasso
fit.lasso$coeff
fit.lasso$b0
fit.lasso <- glmnet(x,y, lambda = 8)
fit.lasso$beta
lambda.grid <- 0:100
cv.lasso <- cv.glmnet(x,y, lambda = lambda.grid)
bestlam.lasso <- cv.lasso$lambda.min
bestlam.lasso
plot(cv.lasso)
abline(v=log(bestlam.lasso), lty=1)
set.seed(42)
lambda.grid <- 0:100
cv.lasso <- cv.glmnet(x,y, lambda = lambda.grid)
bestlam.lasso <- cv.lasso$lambda.min
bestlam.lasso
plot(cv.lasso)
abline(v=log(bestlam.lasso), lty=1)
fit.lasso <- glmnet(x,y, lambda = 8)
set.seed(42)
lambda.grid <- 0:100
cv.lasso <- cv.glmnet(x,y, lambda = lambda.grid)
bestlam.lasso <- cv.lasso$lambda.min
bestlam.lasso
cv.lasso
lambda.grid
set.seed(42)
lambda.grid <- seq(0,100,length=1000)
cv.lasso <- cv.glmnet(x,y, lambda = lambda.grid)
bestlam.lasso <- cv.lasso$lambda.min
bestlam.lasso
plot(cv.lasso)
abline(v=log(bestlam.lasso), lty=1)
fit.lasso <- glmnet(x,y, lambda = 8)
lambda.grid <- seq(0,100,length=10000)
cv.lasso <- cv.glmnet(x,y, lambda = lambda.grid)
bestlam.lasso <- cv.lasso$lambda.min
bestlam.lasso
plot(cv.lasso)
abline(v=log(bestlam.lasso), lty=1)
lambda.grid <- seq(0,100,length=10000)
cv.lasso <- cv.glmnet(x,y, lambda = lambda.grid)
bestlam.lasso <- cv.lasso$lambda.min
bestlam.lasso
plot(cv.lasso)
abline(v=log(bestlam.lasso), lty=1)
fit.lasso <- glmnet(x,y, lambda = 8)
set.seed(42)
lambda.grid <- seq(0,100,length=10000)
cv.lasso <- cv.glmnet(x,y, lambda = lambda.grid)
bestlam.lasso <- cv.lasso$lambda.min
bestlam.lasso
set.seed(42)
set.seed(42)
lambda.grid <- seq(0,100,length=10000)
cv.lasso <- cv.glmnet(x,y, lambda = lambda.grid)
bestlam.lasso <- cv.lasso$lambda.min
bestlam.lasso
cv.lasso$lambda
cv.lasso$lambda.1se
cv.lasso$lambda.min
cv.lasso$lambda.min
set.seed(42)
lambda.grid <- seq(1,100,length=10000)
cv.lasso <- cv.glmnet(x,y, lambda = lambda.grid)
bestlam.lasso <- cv.lasso$lambda.min
bestlam.lasso
bestlam.lasso <- cv.lasso$lambda.min
bestlam.lasso
lambda.grid <- seq(0,100,length=10000)
cv.lasso <- cv.glmnet(x,y, lambda = lambda.grid)
bestlam.lasso <- cv.lasso$lambda.min
bestlam.lasso
plot(cv.lasso)
set.seed(42)
lambda.grid <- seq(0,100,length=10000)
cv.lasso <- cv.glmnet(x,y, lambda = lambda.grid)
bestlam.lasso <- cv.lasso$lambda.min
bestlam.lasso
lambda.grid <- seq(0,100,length=10000)
cv.lasso <- cv.glmnet(x,y, alpha = 1, lambda = lambda.grid)
bestlam.lasso <- cv.lasso$lambda.min
bestlam.lasso
lambda.grid <- seq(0,100,length=10000)
cv.lasso <- cv.glmnet(x,y, alpha = 1, lambda = lambda.grid)
bestlam.lasso <- cv.lasso$lambda.min
bestlam.lasso
lambda.grid <- seq(0,100,length=10000)
?cv.glmnet
set.seed(42)
lambda.grid <- seq(0,100,length=1000)
cv.lasso <- cv.glmnet(x,y, alpha = 1, lambda = lambda.grid)
bestlam.lasso <- cv.lasso$lambda.min
fit.lasso <- glmnet(x,y, lambda = 5)
set.seed(42)
lambda.grid <- seq(0,100,length=1000)
cv.lasso <- cv.glmnet(x,y, alpha = 1, lambda = lambda.grid)
bestlam.lasso <- cv.lasso$lambda.min
bestlam.lasso
plot(cv.lasso)
abline(v=log(bestlam.lasso), lty=1)
fit.lasso <- glmnet(x,y, lambda = 8)
lambda.grid <- seq(0,100,length=1000)
cv.lasso <- cv.glmnet(x,y, alpha = 1, lambda = lambda.grid)
bestlam.lasso <- cv.lasso$lambda.min
bestlam.lasso
set.seed(42)
lambda.grid <- seq(0,100,length=1000)
cv.lasso <- cv.glmnet(x,y, alpha = 1, lambda = lambda.grid)
bestlam.lasso <- cv.lasso$lambda.min
bestlam.lasso
plot(cv.lasso)
abline(v=log(bestlam.lasso), lty=1)
x <- model.matrix(Sales ~ ., data = df)[,-1]
y <- Sales
library(glmnet)
fit.lasso <- glmnet(x,y, alpha = 1, lambda = 5)
fit.lasso$beta
set.seed(42)
lambda.grid <- seq(0,100,length=10000)
cv.lasso <- cv.glmnet(x,y, alpha = 1, lambda = lambda.grid)
bestlam.lasso <- cv.lasso$lambda.min
bestlam.lasso
plot(cv.lasso)
abline(v=log(bestlam.lasso), lty=1)
fit.lasso <- glmnet(x,y, lambda = 8)
?cv.glmnet
set.seed(42)
lambda.grid <- seq(0,100,length=10000)
cv.lasso <- cv.glmnet(x,y, alpha = 1, measure = "aic", nfolds = 20, lambda = lambda.grid)
bestlam.lasso <- cv.lasso$lambda.min
bestlam.lasso
cv.lasso <- cv.glmnet(x,y, alpha = 1, measure = "aic", nfolds = 20, lambda = lambda.grid)
bestlam.lasso <- cv.lasso$lambda.min
bestlam.lasso
cv.lasso <- cv.glmnet(x,y, alpha = 1, measure = "aic", nfolds = 20, lambda = lambda.grid)
bestlam.lasso <- cv.lasso$lambda.min
bestlam.lasso
cv.lasso <- cv.glmnet(x,y, alpha = 1, measure = "aic", nfolds = 47, lambda = lambda.grid)
bestlam.lasso <- cv.lasso$lambda.min
bestlam.lasso
plot(cv.lasso)
cv.lasso <- cv.glmnet(x,y, alpha = 1, measure = "aic", nfolds = 47, lambda = lambda.grid)
bestlam.lasso <- cv.lasso$lambda.min
bestlam.lasso
lambda.grid <- seq(0,100,length=10000)
cv.lasso <- cv.glmnet(x,y, alpha = 1, measure = "aic", nfolds = 47, lambda = lambda.grid)
bestlam.lasso <- cv.lasso$lambda.min
bestlam.lasso
plot(cv.lasso)
abline(v=log(bestlam.lasso), lty=1)
fit.lasso <- glmnet(x,y, lambda = bestlam.lasso)
fit.lasso$beta
fit <- lm(Sales ~ Day.of.WeekTue + Wraps.Sold + Piadina.Sold + Total.Soda.and.Coffee.Sold, data = df)
fit <- lm(Sales ~ "Day.of.WeekTue" + Wraps.Sold + Piadina.Sold + Total.Soda.and.Coffee.Sold, data = df)
var <- ifelse(Day.of.Week=="Tuesday",1,0)
fit <- lm(Sales ~ var + Wraps.Sold + Piadina.Sold + Total.Soda.and.Coffee.Sold, data = df)
summary(fit)
View(df)
var <- ifelse(Day.of.Week=="Tue",1,0)
fit <- lm(Sales ~ var + Wraps.Sold + Piadina.Sold + Total.Soda.and.Coffee.Sold, data = df)
summary(fit)
fit <- lm(Sales ~ ., data = df)
summary(fit)
cv.lasso <- cv.glmnet(x,y, alpha = 1, nfolds = 47, lambda = lambda.grid)
bestlam.lasso <- cv.lasso$lambda.min
bestlam.lasso
plot(cv.lasso)
abline(v=log(bestlam.lasso), lty=1)
fit.lasso <- glmnet(x,y, lambda = bestlam.lasso)
fit.lasso$beta
var <- ifelse(Day.of.Week=="Tue",1,0)
fit <- lm(Sales ~ var + Wraps.Sold + Piadina.Sold + Total.Soda.and.Coffee.Sold, data = df)
summary(fit)
fit.lasso$beta
fit <- lm(Sales ~ var + Sandwich.Sold + Piadina.Sold + Total.Soda.and.Coffee.Sold, data = df)
summary(fit)
source('C:/Users/ffede/OneDrive/Desktop/AppliedStatTDE/Old exams (in English)/190719/fedeli/es3.R', encoding = 'UTF-8')
df <- read.table('watertemp.txt')
df <- read.table('watertemp.txt')
View(df)
basis <- create.fourier.basis(rangeval=c(1,366),nbasis=45)
library(fda)
basis <- create.fourier.basis(rangeval=c(1,366),nbasis=45)
basis <- create.fourier.basis(rangeval=c(1,365),nbasis=45)
data_L.fd <- Data2fd(df,Zone,basis)
data.fd <- Data2fd(df,Zone,basis)
df <- read.table('piadeina.txt')
fit <- lm(Sales ~ ., data = df)
summary(fit)
fit <- lm(Sales ~ . - Chips.Sold, data = df)
summary(fit)
fit <- lm(Sales ~ . , data = df)
summary(fit)
time <- seq(1,365)
basis <- create.fourier.basis(rangeval=c(1,365),nbasis=45)
data.fd <- Data2fd(df,time,basis)
df <- read.table('watertemp.txt')
library(fda)
time <- seq(1,365)
basis <- create.fourier.basis(rangeval=c(1,365),nbasis=45)
data.fd <- Data2fd(df,time,basis)
# Second dataset: lip
# 51 measurements of the position of the lower lip every 7
# milliseconds for 20 repetitions of the syllable 'bob'.
help(lip)
data_L <- lip
View(data_L)
df <- read.table('piadeina.txt')
fit <- lm(Sales ~ . , data = df)
summary(fit)
basis <- create.fourier.basis(rangeval=c(1,365),nbasis=45)
data.fd <- Data2fd(df[-366],time,basis)
data.fd <- Data2fd(df[,-366],time,basis)
matplot(time,df,type='l',main='Lip data',ylab='Position',
xlab='Time (millisec.)')
matplot(time,df,type='l',main='Lip data',ylab='Position')
time
df
matplot(time,df[,-366],type='l',main='Lip data',ylab='Position')
df <- read.table('watertemp.txt')
matplot(time,df[,-366],type='l',main='Lip data',ylab='Position')
matplot(t(df[,-366]), type = 'l')
data.fd <- Data2fd(t(df[,-366]),time,basis)
df <- read.table('watertemp.txt')
library(fda)
time <- seq(1,365)
basis <- create.fourier.basis(rangeval=c(1,365),nbasis=45)
data.fd <- Data2fd(t(df[,-366]),time,basis)
plot.fd(data.fd, main="Fourier")
basis <- create.bspline.basis(rangeval=c(1,365),nbasis=21)
data.fd2 <- Data2fd(y = t(df[,-366]) ,argvals = time,basisobj = basis)
plot.fd(data.fd2, main="B-splines")
basis <- create.fourier.basis(rangeval=c(1,365),nbasis=21)
data.fd <- Data2fd(t(df[,-366]),time,basis)
plot.fd(data.fd, main="Fourier")
basis <- create.bspline.basis(rangeval=c(1,365),nbasis=21)
data.fd2 <- Data2fd(y = t(df[,-366]) ,argvals = time,basisobj = basis)
plot.fd(data.fd2, main="B-splines")
basis <- create.bspline.basis(rangeval=c(1,365),nbasis=45)
data.fd2 <- Data2fd(y = t(df[,-366]) ,argvals = time,basisobj = basis)
plot.fd(data.fd2, main="B-splines")
par(mfrow = c(1,2))
basis <- create.fourier.basis(rangeval=c(1,365),nbasis=45)
data.fd <- Data2fd(t(df[,-366]),time,basis)
plot.fd(data.fd, main="Fourier")
basis <- create.bspline.basis(rangeval=c(1,365),nbasis=45)
data.fd2 <- Data2fd(y = t(df[,-366]) ,argvals = time,basisobj = basis)
plot.fd(data.fd2, main="B-splines")
basis2 <- create.bspline.basis(rangeval=c(1,365),nbasis=45)
data.fd2 <- Data2fd(y = t(df[,-366]) ,argvals = time,basisobj = basis2)
plot.fd(data.fd2, main="B-splines")
basis <- create.fourier.basis(rangeval=c(1,365),nbasis=45)
data.fd <- Data2fd(t(df[,-366]),time,basis)
plot.fd(data.fd, main="Fourier")
basis2 <- create.bspline.basis(rangeval=c(1,365),nbasis=45)
data.fd2 <- Data2fd(y = t(df[,-366]) ,argvals = time,basisobj = basis2)
plot.fd(data.fd2, main="B-splines")
par(mfrow = c(1,2))
basis <- create.fourier.basis(rangeval=c(1,365),nbasis=45)
data.fd <- Data2fd(t(df[,-366]),time,basis)
plot.fd(data.fd, main="Fourier")
basis2 <- create.bspline.basis(rangeval=c(1,365),nbasis=45)
data.fd2 <- Data2fd(y = t(df[,-366]) ,argvals = time,basisobj = basis2)
plot.fd(data.fd2, main="B-splines")
data.fd2
data.fd2$coefs
data.fd$coefs
data.fd$coefs[1]
data.fd$coefs[,1]
data.fd$coefs[,100]
data.fd$coefs
data.fd$coefs[,100]
data.fd$coefs[1:3,1]
data.fd$coefs[1:3,2]
fpca <- pca.fd(data.fd,nharm=5,centerfns=TRUE)
fpc
fpca
fpca$harmonics
plot(fpca$values[1:35],xlab='j',ylab='Eigenvalues')
plot(cumsum(fpca$values)[1:35]/sum(fpca$values),xlab='j',ylab='CPV',ylim=c(0.8,1))
plot(fpca$values[1:35],xlab='j',ylab='Eigenvalues')
plot(cumsum(fpca$values)[1:35]/sum(fpca$values),xlab='j',ylab='CPV',ylim=c(0.8,1))
layout(cbind(1,2))
plot(fpca$harmonics[1,],col=1,ylab='FPC1',ylim=c(-0.1,0.08))
plot(fpca$harmonics[1,],col=1,ylab='FPC1',ylim=c(-0.1,0.08))
layout(cbind(1,3))
plot(fpca$harmonics[1,],col=1,ylab='FPC1',ylim=c(-0.1,0.08))
abline(h=0,lty=2)
plot(fpca$harmonics[2,],col=2,ylab='FPC2',ylim=c(-0.1,0.08))
par(mfrow=c(1,3))
plot(fpca$harmonics[1,],col=1,ylab='FPC1',ylim=c(-0.1,0.08))
abline(h=0,lty=2)
plot(fpca$harmonics[2,],col=2,ylab='FPC2',ylim=c(-0.1,0.08))
abline(h=0,lty=2)
plot(fpca$harmonics[2,],col=2,ylab='FPC2',ylim=c(-0.1,0.08))
par(mfrow=c(1,3))
plot(fpca$harmonics[1,],col=1,ylab='FPC1',ylim=c(-0.1,0.08))
abline(h=0,lty=2)
plot(fpca$harmonics[2,],col=2,ylab='FPC2',ylim=c(-0.1,0.08))
abline(h=0,lty=2)
plot(fpca$harmonics[3,],col=2,ylab='FPC2',ylim=c(-0.1,0.08))
fpca$varprop
fpca$scores
plot(fpca$scores[,1],fpca$scores[,2],col = df[,366])
plot(fpca$scores[,1],fpca$scores[,2],col = df[,366])
View(df)
legend('topleft',c('Deep', 'Medium', 'Surface'), col = c('black','red','green'), pch = 16)
legend('topright',c('Deep', 'Medium', 'Surface'), col = c('black','red','green'), pch = 16)
plot(fpca$scores[,1],fpca$scores[,2],col = df[,366])
legend('topright',c('Deep', 'Medium', 'Surface'), col = c('black','red','green'), pch = 16)
par(mfrow=c(1,3))
plot(fpca$harmonics[1,],col=1,ylab='FPC1',ylim=c(-0.1,0.08))
abline(h=0,lty=2)
plot(fpca$harmonics[2,],col=2,ylab='FPC2',ylim=c(-0.1,0.08))
abline(h=0,lty=2)
plot(fpca$harmonics[3,],col=2,ylab='FPC2',ylim=c(-0.1,0.08))
