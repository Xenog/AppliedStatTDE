Sp <- ((n1-1)*t1.cov + (n2-1)*t2.cov)/(n1+n2-2)
delta.0 <- 0
Spinv   <- solve(Sp)
T2 <- n1*n2/(n1+n2) * (t1.mean-t2.mean-delta.0) %*% Spinv %*% (t1.mean-t2.mean-delta.0)
P <- 1 - pf(T2/(p*(n1+n2-2)/(n1+n2-1-p)), p, n1+n2-1-p)
pval[k]<-P
p = 1
P <- 1 - pf(T2/(p*(n1+n2-2)/(n1+n2-1-p)), p, n1+n2-1-p)
pval[k]<-P
for (k in 1:dim(df1)[2]){
t1.mean <- mean(df1[,k])
t2.mean <- mean(df2[,k])
t1.cov <- var(df1[,k])
t2.cov <- var(df2[,k])
n1 = 10
n2 = 10
p = 1
Sp <- ((n1-1)*t1.cov + (n2-1)*t2.cov)/(n1+n2-2)
delta.0 <- 0
Spinv   <- solve(Sp)
T2 <- n1*n2/(n1+n2) * (t1.mean-t2.mean-delta.0) %*% Spinv %*% (t1.mean-t2.mean-delta.0)
P <- 1 - pf(T2/(p*(n1+n2-2)/(n1+n2-1-p)), p, n1+n2-1-p)
pval[k]<-P
}
p_bh_err<-p_bh
p_bonf_err <- p_bonf
pval_err <- pval
which(gauss<0.05)
min(pval)
which(pval<2.83e-5)
max(pval)
which(pval>0.992)
p_bonf <- p.adjust(pval,"bonferroni")
which(p_bonf<0.05)
p_bh <- p.adjust(pval,"BH")
which(p_bh<0.05)
which(p_bh_err<0.05)
which(p_bh_err<0.025)
which(p_bh_err<0.02)
which(p_bh<0.025)
which(p_bonf<0.05)
which(p_bonf_err<0.05)
?t.test
# D <- df1-df2
# gauss <- rep(NA,dim(D)[2])
# for (k in 1:dim(df1)[2]){
#   gauss[k] <- shapiro.test(D[,k])$p.value
#   pval[k] <- t.test(D[,k],alternative = "less")$p.value
# }
pval_2 <- rep(NA,dim(df1)[2])
pval_2[k] <- t.test(d1[,k],d2[,k],alternative = "less")$p.value
pval_2[k] <- t.test(df1[,k],df2[,k],alternative = "less")$p.value
for (k in 1:dim(df1)[2]){
t1.mean <- mean(df1[,k])
t2.mean <- mean(df2[,k])
t1.cov <- var(df1[,k])
t2.cov <- var(df2[,k])
n1 = 10
n2 = 10
p = 1
Sp <- ((n1-1)*t1.cov + (n2-1)*t2.cov)/(n1+n2-2)
delta.0 <- 0
Spinv   <- solve(Sp)
T2 <- n1*n2/(n1+n2) * (t1.mean-t2.mean-delta.0) %*% Spinv %*% (t1.mean-t2.mean-delta.0)
P <- 1 - pf(T2/(p*(n1+n2-2)/(n1+n2-1-p)), p, n1+n2-1-p)
pval[k]<-P
pval_2[k] <- t.test(df1[,k],df2[,k],alternative = "less")$p.value
}
which(gauss<0.05)
min(pval_2)
which(pval_2<2.83e-5)
max(pval_2)
which(pval_2>0.992)
p_bonf <- p.adjust(pval_2,"bonferroni")
which(p_bonf<0.05)
p_bh <- p.adjust(pval_2,"BH")
which(p_bh<0.05)
p_bonf <- p.adjust(pval,"bonferroni")
which(p_bonf<0.05)
p_bonf <- p.adjust(pval,"bonferroni")
which(p_bonf<0.05)
p_bonf <- p.adjust(pval,"bonferroni")
which(p_bonf<0.05)
p_bonf <- p.adjust(pval_2,"bonferroni")
which(p_bonf<0.05)
for (k in 1:dim(df1)[2]){
t1.mean <- mean(df1[,k])
t2.mean <- mean(df2[,k])
t1.cov <- var(df1[,k])
t2.cov <- var(df2[,k])
n1 = 10
n2 = 10
p = 1
Sp <- ((n1-1)*t1.cov + (n2-1)*t2.cov)/(n1+n2-2)
delta.0 <- 0
Spinv   <- solve(Sp)
T2 <- n1*n2/(n1+n2) * (t1.mean-t2.mean-delta.0) %*% Spinv %*% (t1.mean-t2.mean-delta.0)
P <- 0.5*(1 - pf(T2/(p*(n1+n2-2)/(n1+n2-1-p)), p, n1+n2-1-p))
pval[k]<-P
pval_2[k] <- t.test(df1[,k],df2[,k],alternative = "less")$p.value
}
p_bonf <- p.adjust(pval,"bonferroni")
which(p_bonf<0.05)
p_bonf <- p.adjust(pval_2,"bonferroni")
which(p_bonf<0.05)
pval == pval_2
pval < pval_2
pval
pval_2
for (k in 1:dim(df1)[2]){
t1.mean <- mean(df1[,k])
t2.mean <- mean(df2[,k])
t1.cov <- var(df1[,k])
t2.cov <- var(df2[,k])
n1 = 10
n2 = 10
p = 1
Sp <- ((n1-1)*t1.cov + (n2-1)*t2.cov)/(n1+n2-2)
delta.0 <- 0
Spinv   <- solve(Sp)
T2 <- n1*n2/(n1+n2) * (t1.mean-t2.mean-delta.0) %*% Spinv %*% (t1.mean-t2.mean-delta.0)
P <- (1 - pf(T2/(p*(n1+n2-2)/(n1+n2-1-p)), p, n1+n2-1-p))
pval[k]<-P
pval_2[k] <- t.test(df1[,k],df2[,k],alternative = "two-sided")$p.value
}
for (k in 1:dim(df1)[2]){
t1.mean <- mean(df1[,k])
t2.mean <- mean(df2[,k])
t1.cov <- var(df1[,k])
t2.cov <- var(df2[,k])
n1 = 10
n2 = 10
p = 1
Sp <- ((n1-1)*t1.cov + (n2-1)*t2.cov)/(n1+n2-2)
delta.0 <- 0
Spinv   <- solve(Sp)
T2 <- n1*n2/(n1+n2) * (t1.mean-t2.mean-delta.0) %*% Spinv %*% (t1.mean-t2.mean-delta.0)
P <- (1 - pf(T2/(p*(n1+n2-2)/(n1+n2-1-p)), p, n1+n2-1-p))
pval[k]<-P
pval_2[k] <- t.test(df1[,k],df2[,k],alternative = "two.sided")$p.value
}
p_val
pval
pval_2
df <- read.table('snow.txt')
View(df)
mcshapiro.test(df[df$Snow.G.1=="snow",1:2])
mcshapiro.test(df[df$risk=="nosnow",1:2])
mcshapiro.test(df[df$Snow.G.1=="nosnow",1:2])
mcshapiro.test(df[df$Snow.G.1!="snow",1:2])
var(df[df$Snow.G.1=="snow",1:2])
var(df[df$Snow.G.1!="snow",1:2])
plot(df[,1],df[,2],col = df[,3])
fit <- lda(df[,1:2], df[,3])
fit
pred <- predict(fit, df[,1:2])
plot(df[,1], df[,2], col=df[,3])
points(fit$means, pch=4,col=c('black','red') , lwd=2, cex=1.5)
x  <- seq(min(df[,1]), max(df[,1]), length=200)
y  <- seq(min(df[,2]), max(df[,2]), length=200)
xy <- expand.grid(x=x, y=y)
z  <- predict(fit, xy)$post
z1 <- z[,1] - z[,2]
z2 <- z[,2] - z[,1]
contour(x, y, matrix(z1, 200), levels=0, drawlabels=F, add=T)
contour(x, y, matrix(z2, 200), levels=0, drawlabels=F, add=T)
fit <- qda(df[,1:2], df[,3])
fit
pred <- predict(fit, df[,1:2])
plot(df[,1], df[,2], col=df[,3])
points(fit$means, pch=4,col=c('black','red') , lwd=2, cex=1.5)
x  <- seq(min(df[,1]), max(df[,1]), length=200)
y  <- seq(min(df[,2]), max(df[,2]), length=200)
xy <- expand.grid(x=x, y=y)
z  <- predict(fit, xy)$post
z1 <- z[,1] - z[,2]
z2 <- z[,2] - z[,1]
contour(x, y, matrix(z1, 200), levels=0, drawlabels=F, add=T)
contour(x, y, matrix(z2, 200), levels=0, drawlabels=F, add=T)
s = qda(df[,1:2], df[,3], CV=T) # x, grouping
# Compute the estimate of the AER by leave-out-out cross-validation
table(class.true=df[,3], class.assignedCV=s$class)
errorCV <- (s$class != df[,3])
errorCV
AERCV   <- sum(errorCV)/length(df[,3])
AERCV
s = lda(df[,1:2], df[,3], CV=T) # x, grouping
# Compute the estimate of the AER by leave-out-out cross-validation
table(class.true=df[,3], class.assignedCV=s$class)
errorCV <- (s$class != df[,3])
errorCV
AERCV   <- sum(errorCV)/length(df[,3])
AERCV
s = qda(df[,1:2], df[,3], CV=T) # x, grouping
# Compute the estimate of the AER by leave-out-out cross-validation
table(class.true=df[,3], class.assignedCV=s$class)
errorCV <- (s$class != df[,3])
errorCV
AERCV   <- sum(errorCV)/length(df[,3])
AERCV
summary(df$Snow.G.1)
banale <- rep("snow",30)
dummy <- rep("snow",30)
errorCV <- (dummy != df[,3])
errorCV
AERCV   <- sum(errorCV)/length(df[,3])
AERCV
newdata <- data.frame(Temperature.G = -10, Humidity.G = 0.75)
predict(newdata,s)
predict(s,newdata)
predict(fit,newdata)
var(df[df$Snow.G.1=="snow",1:2])
var(df[df$Snow.G.1!="snow",1:2])
wideroe <- read.table("wideroe.txt")
norwegian <- read.table("norwegian.txt")
wideroe <- read.table("wideroe.txt")
norwegian <- read.table("norwegian.txt")
airlines <- rbind(wideroe, norwegian)
View(airlines)
airlines$D <- rep(c(0,1), each = 85)
View(airlines)
fit <- lm(durata ~ D*tratte, data = df)
df <- rbind(wideroe, norwegian)
df$D <- rep(c(0,1), each = 85)
fit <- lm(durata ~ D*tratte, data = df)
summary(fit)
library(car)
C <- rbind(c(0,1,0,0), c(0,0,0,1))
linearHypothesis(fit, C)
linearHypothesis(fit, rbind(c(0,1,0,0), c(0,0,0,1)))
linearHypothesis(fit, rbind(c(0,1,0,0), c(0,0,0,1)))
vif(fit)
fit <- lm(durata ~ D*tratte, data = df)
summary(fit)
fit <- lm(durata ~ D:tratte + tratte, data = df)
summary(fit)
wideroe <- read.table("wideroe.txt")
norwegian <- read.table("norwegian.txt")
df <- rbind(wideroe, norwegian)
df$C <- rep(c(0,1), each = 85)
fit <- lm(durata ~ C*tratte, data = df)
summary(fit)
vif(fit)
library(car)
linearHypothesis(fit, rbind(c(0,1,0,0), c(0,0,0,1)))
# io lascerei tutto -> al massimo tolgo C, ma è significativo
wideroe <- read.table("wideroe.txt")
norwegian <- read.table("norwegian.txt")
df <- rbind(wideroe, norwegian)
df$C <- rep(c(0,1), each = 85)
fit <- lm(durata ~ C*tratte, data = df)
summary(fit)
vif(fit)
library(car)
linearHypothesis(fit, rbind(c(0,1,0,0), c(0,0,0,1)))
# io lascerei tutto -> al massimo tolgo C, ma è significativo
summary(fit)
# d
x = 400
coefficients(fit)[1]+coefficients(fit)[3]*x
coefficients(fit)[1]+coefficients(fit)[2]+coefficients(fit)[3]*x+coefficients(fit)[4]*x
# d
x = 1
while(coefficients(fit)[1]+coefficients(fit)[3]*x<coefficients(fit)[1]+coefficients(fit)[2]+coefficients(fit)[3]*x+coefficients(fit)[4]*x)){
x = x+1
}
while(coefficients(fit)[1]+coefficients(fit)[3]*x<coefficients(fit)[1]+coefficients(fit)[2]+coefficients(fit)[3]*x+coefficients(fit)[4]*x){
x = x+1
}
# d
x = 508
while(coefficients(fit)[1]+coefficients(fit)[3]*x<coefficients(fit)[1]+coefficients(fit)[2]+coefficients(fit)[3]*x+coefficients(fit)[4]*x){
x = x+0.001
}
a <- c(0, -1, 0, -950)
alpha <- 0.05
conf.int <- c(inf = a%*%coefficients(fit) - sqrt(t(a)%*%vcov(fit)%*%a)*qt(1 - alpha/2, n - 4), sup = a%*%coefficients(fit) + sqrt(t(a)%*%vcov(fit)%*%a)*qt(1 - alpha/2, n - 4))
n <- 170
alpha <- 0.05
conf.int <- c(inf = a%*%coefficients(fit) - sqrt(t(a)%*%vcov(fit)%*%a)*qt(1 - alpha/2, n - 4), sup = a%*%coefficients(fit) + sqrt(t(a)%*%vcov(fit)%*%a)*qt(1 - alpha/2, n - 4))
conf.int
coefficients(fit)
n <- 1
alpha <- 0.05
conf.int <- c(inf = a%*%coefficients(fit) - sqrt(t(a)%*%vcov(fit)%*%a)*qt(1 - alpha/2, n - 4), sup = a%*%coefficients(fit) + sqrt(t(a)%*%vcov(fit)%*%a)*qt(1 - alpha/2, n - 4))
conf.int
n <- 5
alpha <- 0.05
conf.int <- c(inf = a%*%coefficients(fit) - sqrt(t(a)%*%vcov(fit)%*%a)*qt(1 - alpha/2, n - 4), sup = a%*%coefficients(fit) + sqrt(t(a)%*%vcov(fit)%*%a)*qt(1 - alpha/2, n - 4))
conf.int
n <- 170
alpha <- 0.05
conf.int <- c(inf = a%*%coefficients(fit) - sqrt(t(a)%*%vcov(fit)%*%a)*qt(1 - alpha/2, n - 4), sup = a%*%coefficients(fit) + sqrt(t(a)%*%vcov(fit)%*%a)*qt(1 - alpha/2, n - 4))
conf.int
summary(fit)
setwd("C:/Users/ffede/OneDrive/Desktop/AppliedStatTDE/Old exams (in English)/140917")
df <- read.table('sunchair.txt')
df <- read.table('sunchair.txt')
View(df)
C <- rbind(c(1,-1,0,0),c(1,0,-1,0),c(1,0,0,-1))
View(C)
load("C:/Users/ffede/OneDrive/Desktop/AppliedStatTDE/Old exams (in English)/140917/mcshapiro.test.RData")
n = dim(df)[1]
p = dim(df)[2]
mcshapiro.test(df)
M = sapply(df, mean)
S = cov(df)
Md = C %*% M
Sd = C %*% S %*% t(C)
Sd.inv = solve(Sd)
n = dim(df)[1]
p = dim(df)[2]
mu0 = c(0,0,0)
T2   <- n * t(Mc-mu0) %*%  Sd.inv  %*% (Mc-mu0)
alpha = 0.05
T2   <- n * t(Md-mu0) %*%  Sd.inv  %*% (Md-mu0)
alpha = 0.05
cfr.fisher <- ((n-1)*p/(n-p))*qf(1-alpha,p,n-p)
T2 < cfr.fisher   # no statistical evidence to reject H0 at level alpha
P <- 1-pf(T2*(n-p)/((n-1)*p), p, n-p)
P
k     <- p
alpha = 0.05
cfr.t <- qt(1-alpha/(2*k),n-1)
IC.BF <- cbind( M - cfr.t*sqrt(diag(S)/n) , M, M + cfr.t*sqrt(diag(S)/n) )
IC.BF
C
df <- read.table('olives.txt')
View(df)
mcshapiro.test(df[,1:3])
shapiro.test(Tot[which(Restaurant == levels(df[,4]))[1]])
shapiro.test(df[which(Restaurant == levels(df[,4]))[1]])
attach(df)
shapiro.test(df[which(Restaurant == levels(df[,4]))[1]])
Restaurant == levels(df[,4]
)
shapiro.test(df[which(Restaurant == levels(df[,4]))[1],])
df[which(Restaurant == levels(df[,4]))[1],]
IC.BF
shapiro.test(df[which(Restaurant == levels(df[,4]))[2],1:3])
shapiro.test(df[which(Restaurant == levels(df[,4]))[1],1])
shapiro.test(df[which(Restaurant == levels(df[,4]))[2],1])
which(Restaurant == levels(df[,4]))[2],1]
Restaurant == levels(df[,4]))[2],1]
Restaurant == levels(df[,4]))[2],1
[Restaurant == levels(df[,4]))[2],1]
df[Restaurant == levels(df[,4]))[2],1]
df[Restaurant == levels(df[,4])[2],1]
shapiro.test(df[which(Restaurant == levels(df[,4])[1],1])
shapiro.test(df[which(Restaurant == levels(df[,4])[1]),1])
shapiro.test(df[which(Restaurant == levels(df[,4])[2]),1])
mcshapiro.test(df[which(Restaurant == levels(df[,4])[1]),1:3])
mcshapiro.test(df[which(Restaurant == levels(df[,4])[2]),1:3])
var(df[which(Restaurant == levels(df[,4])[1]),1:3])
var(df[which(Restaurant == levels(df[,4])[2]),1:3])
m <- manova(as.matrix(df[,c(1,2,3)]) ~ Restaurant)
summary.manova(man, test = "Wilks")
summary.manova(m, test = "Wilks")
summary.manova(m, test = "Pillai")
# we compute the sample mean, covariance matrices and the matrix
# Spooled
df1 <- df[which(Restaurant == levels(df[,4])[1]),1:3]
df2 <- df[which(Restaurant == levels(df[,4])[2]),1:3]
IC.T2 <- rbind(IC.T2.X1, IC.T2.X2, IC.T2.X3)
t1.mean <- sapply(t1,mean)
t2.mean <- sapply(t2,mean)
t1.cov  <-  cov(t1)
t2.cov  <-  cov(t2)
Sp      <- ((n1-1)*t1.cov + (n2-1)*t2.cov)/(n1+n2-2)
# Simultaneous T2 intervals
IC.T2.X1 <- c(t1.mean[1]-t2.mean[1]-sqrt(cfr.fisher*Sp[1,1]*(1/n1+1/n2)), t1.mean[1]-t2.mean[1]+sqrt(cfr.fisher*Sp[1,1]*(1/n1+1/n2)) )
IC.T2.X2 <- c(t1.mean[2]-t2.mean[2]-sqrt(cfr.fisher*Sp[2,2]*(1/n1+1/n2)), t1.mean[2]-t2.mean[2]+sqrt(cfr.fisher*Sp[2,2]*(1/n1+1/n2)) )
IC.T2.X3 <- c(t1.mean[3]-t2.mean[3]-sqrt(cfr.fisher*Sp[3,3]*(1/n1+1/n2)), t1.mean[3]-t2.mean[3]+sqrt(cfr.fisher*Sp[3,3]*(1/n1+1/n2)) )
IC.T2 <- rbind(IC.T2.X1, IC.T2.X2, IC.T2.X3)
# we compute the sample mean, covariance matrices and the matrix
# Spooled
t1 <- df[which(Restaurant == levels(df[,4])[1]),1:3]
t2 <- df[which(Restaurant == levels(df[,4])[2]),1:3]
n1 <- dim(t1)[1]
n2 <- dim(t2)[1]
p  <- dim(t1)[2]
t1.mean <- sapply(t1,mean)
t2.mean <- sapply(t2,mean)
t1.cov  <-  cov(t1)
t2.cov  <-  cov(t2)
Sp      <- ((n1-1)*t1.cov + (n2-1)*t2.cov)/(n1+n2-2)
# Simultaneous T2 intervals
IC.T2.X1 <- c(t1.mean[1]-t2.mean[1]-sqrt(cfr.fisher*Sp[1,1]*(1/n1+1/n2)), t1.mean[1]-t2.mean[1]+sqrt(cfr.fisher*Sp[1,1]*(1/n1+1/n2)) )
IC.T2.X2 <- c(t1.mean[2]-t2.mean[2]-sqrt(cfr.fisher*Sp[2,2]*(1/n1+1/n2)), t1.mean[2]-t2.mean[2]+sqrt(cfr.fisher*Sp[2,2]*(1/n1+1/n2)) )
IC.T2.X3 <- c(t1.mean[3]-t2.mean[3]-sqrt(cfr.fisher*Sp[3,3]*(1/n1+1/n2)), t1.mean[3]-t2.mean[3]+sqrt(cfr.fisher*Sp[3,3]*(1/n1+1/n2)) )
IC.T2 <- rbind(IC.T2.X1, IC.T2.X2, IC.T2.X3)
dimnames(IC.T2)[[2]] <- c('inf','sup')
IC.T2
total <- c(t1.mean[1]-t2.mean[1]-sqrt(cfr.fisher*Sp[1,1]*(1/n1+1/n2)), t1.mean[1]-t2.mean[1]+sqrt(cfr.fisher*Sp[1,1]*(1/n1+1/n2)) )
filling <- c(t1.mean[2]-t2.mean[2]-sqrt(cfr.fisher*Sp[2,2]*(1/n1+1/n2)), t1.mean[2]-t2.mean[2]+sqrt(cfr.fisher*Sp[2,2]*(1/n1+1/n2)) )
breading <- c(t1.mean[3]-t2.mean[3]-sqrt(cfr.fisher*Sp[3,3]*(1/n1+1/n2)), t1.mean[3]-t2.mean[3]+sqrt(cfr.fisher*Sp[3,3]*(1/n1+1/n2)) )
IC.T2 <- rbind(IC.T2.X1, IC.T2.X2, IC.T2.X3)
dimnames(IC.T2)[[2]] <- c('inf','sup')
IC.T2
total <- c(t1.mean[1]-t2.mean[1]-sqrt(cfr.fisher*Sp[1,1]*(1/n1+1/n2)), t1.mean[1]-t2.mean[1]+sqrt(cfr.fisher*Sp[1,1]*(1/n1+1/n2)) )
filling <- c(t1.mean[2]-t2.mean[2]-sqrt(cfr.fisher*Sp[2,2]*(1/n1+1/n2)), t1.mean[2]-t2.mean[2]+sqrt(cfr.fisher*Sp[2,2]*(1/n1+1/n2)) )
breading <- c(t1.mean[3]-t2.mean[3]-sqrt(cfr.fisher*Sp[3,3]*(1/n1+1/n2)), t1.mean[3]-t2.mean[3]+sqrt(cfr.fisher*Sp[3,3]*(1/n1+1/n2)) )
IC.T2 <- rbind(total,filling,breading)
dimnames(IC.T2)[[2]] <- c('inf','sup')
IC.T2
cfr.fisher <- (p*(n1+n2-2)/(n1+n2-1-p))*qf(1-alpha,p,n1+n2-1-p)
# Simultaneous T2 intervals
total <- c(t1.mean[1]-t2.mean[1]-sqrt(cfr.fisher*Sp[1,1]*(1/n1+1/n2)), t1.mean[1]-t2.mean[1]+sqrt(cfr.fisher*Sp[1,1]*(1/n1+1/n2)) )
filling <- c(t1.mean[2]-t2.mean[2]-sqrt(cfr.fisher*Sp[2,2]*(1/n1+1/n2)), t1.mean[2]-t2.mean[2]+sqrt(cfr.fisher*Sp[2,2]*(1/n1+1/n2)) )
breading <- c(t1.mean[3]-t2.mean[3]-sqrt(cfr.fisher*Sp[3,3]*(1/n1+1/n2)), t1.mean[3]-t2.mean[3]+sqrt(cfr.fisher*Sp[3,3]*(1/n1+1/n2)) )
IC.T2 <- rbind(total,filling,breading)
dimnames(IC.T2)[[2]] <- c('inf','sup')
IC.T2
df <- read.table('knossos.txt')
df <- read.table('knossos.txt')
View(df)
eu <- dist(df, method='euclidean')
ward <- hclust(eu, method='complete')
plot(complete, labels = F, sub = "")
('knossos.txt')
('knossos.txt')
('knossos.txt')
df <- read.table('knossos.txt')
eu <- dist(df, method='euclidean')
complete <- hclust(eu, method='complete')
plot(complete, labels = F, sub = "")
tree <- cutree(ward, k = 2)
plot(df, col = tree)
i1 <- which(tree == 1)
i2 <- which(tree == 2)
length(i1)
length(i2)
colMeans(df[i1,])
colMeans(df[i2,])
coph <- cophenetic(complete)
ew <- cor(eu, coph)
ew
single <- hclust(eu, method='single')
coph <- cophenetic(single)
ew <- cor(eu, coph)
ew
tree <- cutree(complete, k = 2)
plot(df, col = tree)
i1 <- which(tree == 1)
i2 <- which(tree == 2)
length(i1)
length(i2)
colMeans(df[i1,])
colMeans(df[i2,])
coph <- cophenetic(complete)
ew <- cor(eu, coph)
ew
mcshapiro.test(df[i1,])
load("C:/Users/ffede/OneDrive/Desktop/AppliedStatTDE/Old exams (in English)/140917/vitellio/mcshapiro.test.RData")
mcshapiro.test(df[i1,])
mcshapiro.test(df[i2,])
t1.mean <- sapply(df[i1,],mean)
t2.mean <- sapply(df[i2,],mean)
t1.cov  <- cov(df[i1,])
t2.cov  <- cov(df[i2,])
Sp      <- ((n1-1)*t1.cov + (n2-1)*t2.cov)/(n1+n2-2)
n1 <- length(i1)
n2 <- length(i2)
Sp      <- ((n1-1)*t1.cov + (n2-1)*t2.cov)/(n1+n2-2)
alpha   <- .05
delta.0 <- c(0,0)
Spinv   <- solve(Sp)
T2 <- n1*n2/(n1+n2) * (t1.mean-t2.mean-delta.0) %*% Spinv %*% (t1.mean-t2.mean-delta.0)
p <- 2
cfr.fisher <- (p*(n1+n2-2)/(n1+n2-1-p))*qf(1-alpha,p,n1+n2-1-p)
T2 < cfr.fisher
P <- 1 - pf(T2/(p*(n1+n2-2)/(n1+n2-1-p)), p, n1+n2-1-p)
P
df <- read.table('tide.txt')
View(df)
fit <- lm(H ~ I(sin(2*pi/28*t))+I(sin(pi/365*(t-82)))+ t, data = df)
fit <- lm(h ~ I(sin(2*pi/28*t))+I(sin(pi/365*(t-82)))+ t, data = df)
summary(fit)
coefficients(fit)
vif(fit)
sd(df$residuals)
sd(fit$residuals)
shapiro.test(df$residuals)
shapiro.test(fit$residuals)
fit
linearHypothesis(fit,rbind(c(0,1,0,0),c(0,0,1,0)))
df <- read.table('tide.txt')
linearHypothesis(fit,c(0,0,0,1))
vif(fit)
# c
fit2 <- lm(h ~ I(sin(2*pi/28*t))+I(sin(pi/365*(t-82))), data = df)
summary(fit2)
fit <- lm(h ~ I(sin(2*pi/28*t))+I(sin(pi/365*(t-82)))+ t, data = df)
summary(fit)
# c
fit2 <- lm(h ~ I(sin(2*pi/28*t))+I(sin(pi/365*(t-82))), data = df)
summary(fit2)
newdata1 <- data.frame(t = 263)
newdata2 <- data.frame(t = 335)
k <- 2
newdata1 <- data.frame(t = 263)
newdata2 <- data.frame(t = 335)
predict(fit,newdata1,type='prediction',level = 1 - alpha/k)
alpha = 0.1
newdata1 <- data.frame(t = 263)
newdata2 <- data.frame(t = 335)
predict(fit,newdata1,type='prediction',level = 1 - alpha/k)
?predict.lm
predict(fit,newdata1,interval='prediction',level = 1 - alpha/k)
predict(fit,newdata2,interval='prediction',level = 1 - alpha/k)
predict(fit2,newdata1,interval='prediction',level = 1 - alpha/k)
predict(fit2,newdata2,interval='prediction',level = 1 - alpha/k)
